{"pages":[{"date":"2024-12-06","image":"","imageAlt":"","link":"https://blog.dazzlog.de/posts/2024-12-06_s6-cli/","summary":"\u003cp\u003eI developed a small cli in golang to ease creating, validating and documenting services that s6 supervises.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eThe repo: \u003ca href=\"https://github.com/dazz/s6-cli\"\u003ehttps://github.com/dazz/s6-cli\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eThe docker image: \u003ca href=\"https://hub.docker.com/repository/docker/hakindazz/s6-cli\"\u003ehttps://hub.docker.com/repository/docker/hakindazz/s6-cli\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"usage\"\u003eUsage\u003c/h2\u003e\n\u003cp\u003eYou do not need to install anything, just execute the binary via docker\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003edocker run -it --rm hakindazz/s6-cli \u003cspan style=\"color:#8be9fd;font-style:italic\"\u003ehelp\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eCOMMANDS:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e   create, c   create a service\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e   remove, rm  remove a service\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e   lint, l     lint directories and files\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e   mermaid, m  document s6 service dependencies in mermaid syntax\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e   help, h     Shows a list of commands or \u003cspan style=\"color:#8be9fd;font-style:italic\"\u003ehelp\u003c/span\u003e \u003cspan style=\"color:#ff79c6\"\u003efor\u003c/span\u003e one \u003cspan style=\"color:#8be9fd;font-style:italic\"\u003ecommand\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"create-a-service-with-s6-cli\"\u003eCreate a service with s6-cli\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003edocker run -it --rm -v ./:/etc/s6-overlay hakindazz/s6-cli create oneshot init-dependencies\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eHere is the file / directory structure it creates:\u003c/p\u003e","tags":["ci","devops","docker","s6-overlay"],"text":"i developed a small cli in golang to ease creating, validating and documenting services that s6 supervises.\nthe repo: https://github.com/dazz/s6-cli the docker image: https://hub.docker.com/repository/docker/hakindazz/s6-cli usage you do not need to install anything, just execute the binary via docker\ndocker run -it --rm hakindazz/s6-cli help commands: create, c create a service remove, rm remove a service lint, l lint directories and files mermaid, m document s6 service dependencies in mermaid syntax help, h shows a list of commands or help for one command create a service with s6-cli docker run -it --rm -v ./:/etc/s6-overlay hakindazz/s6-cli create oneshot init-dependencies here is the file / directory structure it creates:\n/etc/s6-overlay/s6-rc.d ├── init-dependencies │ ├── dependencies.d │ │ ├── base │ │ └── svc-php-fpm │ ├── type │ └── up └── scripts └── init-dependencies the base dependency is added by s6-cli adding base as default dependency tells s6-rc to only start a service when all the base services are ready, and it prevents race conditions use s6-cli in your ci docker run -it --rm -v .:/etc/s6-overlay hakindazz/s6-cli lint it will tell you when it does not find any issue\ns6-cli: lint found no issues or list the findings so you can fix them before you deploy.\ns6-cli: lint found issues with services in /etc/s6-overlay/s6-rc.d - svc-lint-me - type file for \u0026#34;svc-lint-me\u0026#34; does not end with a newline - invalid type in svc-lint-me/type file specified document your setup with mermaid you can use the mermaid command to output the dependency graph between the services:\ndocker run -it --rm -v .:/etc/s6-overlay hakindazz/s6-cli mermaid ```mermaid graph td; user --\u0026gt; init-dependencies user --\u0026gt; init-migrations user --\u0026gt; svc-nginx init-migrations --\u0026gt; init-directories svc-php-fpm --\u0026gt; init-directories svc-nginx --\u0026gt; init-nginx svc-nginx --\u0026gt; svc-php-fpm which will result in this mermaid\ngraph td; user --\u003e init-dependencies user --\u003e init-migrations user --\u003e svc-nginx init-migrations --\u003e init-directories svc-php-fpm --\u003e init-directories svc-nginx --\u003e init-nginx svc-nginx --\u003e svc-php-fpm ","title":"Manage s6-overlay setup with s6-cli"},{"date":"2024-08-19","image":"https://blog.dazzlog.de/posts/2024-08-19_base-image-with-s6-overlay//s6-overlay.webp","imageAlt":"","link":"https://blog.dazzlog.de/posts/2024-08-19_base-image-with-s6-overlay/","summary":"\u003cp\u003eS6-overlay is a container-focused process manager that offers end-to-end management of the container\u0026rsquo;s lifecycle, from initialization to graceful shutdown.\u003c/p\u003e\n\u003cp\u003eTo make use of s6-overlay we need to add the binaries to our container by adding, extracting and then moving them to the directory where they are expected.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-Dockerfile\" data-lang=\"Dockerfile\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ff79c6\"\u003eADD\u003c/span\u003e https://github.com/just-containers/s6-overlay/releases/download/3.2.0.0/s6-overlay-noarch.tar.xz /tmp  \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ff79c6\"\u003eADD\u003c/span\u003e https://github.com/just-containers/s6-overlay/releases/download/3.2.0.0/s6-overlay-x86_64.tar.xz /tmp\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"update-dependencies\"\u003eUpdate dependencies\u003c/h2\u003e\n\u003cp\u003eWhen adding the s6-overlay sources to in a \u003ccode\u003eDockerfile\u003c/code\u003e we want to make sure that we get notified when a new version\nis available, so we can always be up-to-date with all our libraries. This can be achieved by adding a section to our \u003ca href=\"https://github.com/renovatebot/renovate\"\u003eRenovate\u003c/a\u003e or \u003ca href=\"https://github.com/dependabot\"\u003eDependabot\u003c/a\u003e config, a rule to match\u003c/p\u003e","tags":["devops","docker","s6-overlay"],"text":"s6-overlay is a container-focused process manager that offers end-to-end management of the container\u0026rsquo;s lifecycle, from initialization to graceful shutdown.\nto make use of s6-overlay we need to add the binaries to our container by adding, extracting and then moving them to the directory where they are expected.\nadd https://github.com/just-containers/s6-overlay/releases/download/3.2.0.0/s6-overlay-noarch.tar.xz /tmp add https://github.com/just-containers/s6-overlay/releases/download/3.2.0.0/s6-overlay-x86_64.tar.xz /tmp update dependencies when adding the s6-overlay sources to in a dockerfile we want to make sure that we get notified when a new version is available, so we can always be up-to-date with all our libraries. this can be achieved by adding a section to our renovate or dependabot config, a rule to match\nversion checker know about docker from if we leverage the from of docker to include our sources we would not need to add anything. i already use the way of loading sources via images in several places:\ninclude composer from composer:2.7.7 as composer copy --from=composer /usr/bin/composer /usr/bin/composer include extension-installer from mlocati/php-extension-installer:2.2.16 as php-extension-installer copy --from=php-extension-installer /usr/bin/install-php-extensions /usr/local/bin/ run install-php-extensions \\ xdebug \\ zip \\ ; but there is no base image for s6-overlay from justcontainers/s6-overlay . there are some other vendors, but they are opinionated and do more things that are helpful to their case.\nbuild your own s6-overlay base image from alpine:3 as s6 arg targetarch arg targetvariant arg s6_release run apk add --no-cache curl jq \\ \u0026amp;\u0026amp; if [ -z ${s6_release} ]; then \\ s6_release=$(curl -s https://api.github.com/repos/just-containers/s6-overlay/releases/latest | jq -r \u0026#39;.tag_name\u0026#39; | cut -c2-); \\ fi \\ \u0026amp;\u0026amp; s6_platform=$(case \u0026#34;${targetarch}/${targetvariant}\u0026#34; in \\ \u0026#34;arm/v7\u0026#34;) echo \u0026#34;armhf\u0026#34;;; \\ \u0026#34;arm64/\u0026#34;) echo \u0026#34;aarch64\u0026#34;;; \\ *) echo \u0026#34;x86_64\u0026#34;;; \\ esac) \\ \u0026amp;\u0026amp; echo \u0026#34;using s6 release ${s6_release} platform ${s6_platform}\u0026#34; \\ \u0026amp;\u0026amp; curl -ssl \u0026#34;https://github.com/just-containers/s6-overlay/releases/download/v${s6_release}/s6-overlay-noarch.tar.xz\u0026#34; -o \u0026#34;/tmp/s6-overlay-noarch.tar.xz\u0026#34; \\ \u0026amp;\u0026amp; curl -ssl \u0026#34;https://github.com/just-containers/s6-overlay/releases/download/v${s6_release}/s6-overlay-${s6_platform}.tar.xz\u0026#34; -o \u0026#34;/tmp/s6-overlay-${s6_platform}.tar.xz\u0026#34; \\ \u0026amp;\u0026amp; curl -ssl \u0026#34;https://github.com/just-containers/s6-overlay/releases/download/v${s6_release}/s6-overlay-noarch.tar.xz.sha256\u0026#34; -o \u0026#34;/tmp/s6-overlay-noarch.tar.xz.sha256\u0026#34; \\ \u0026amp;\u0026amp; curl -ssl \u0026#34;https://github.com/just-containers/s6-overlay/releases/download/v${s6_release}/s6-overlay-${s6_platform}.tar.xz.sha256\u0026#34; -o \u0026#34;/tmp/s6-overlay-${s6_platform}.tar.xz.sha256\u0026#34; \\ \u0026amp;\u0026amp; cd /tmp \\ \u0026amp;\u0026amp; sha256sum -c s6-overlay-noarch.tar.xz.sha256 \\ \u0026amp;\u0026amp; sha256sum -c s6-overlay-${s6_platform}.tar.xz.sha256 \\ \u0026amp;\u0026amp; mkdir -p /s6/root \\ \u0026amp;\u0026amp; tar -c /s6/root -jxpf /tmp/s6-overlay-noarch.tar.xz \\ \u0026amp;\u0026amp; tar -c /s6/root -jxpf /tmp/s6-overlay-${s6_platform}.tar.xz from scratch copy --from=s6 /s6/root /s6/root it\ndownloads for the specified architecture asserts the checksum! uses a fresh layer to copy everything this can be built with:\ndocker build --no-cache --build-arg s6_release=3.2.0.0 -t hakindazz/s6-overlay-base:3.2.0.0 . or you can pull the image to check it out:\ndocker pull hakindazz/s6-overlay-base:3.2.0.0 include via docker from the best part: you can now include the versioned sources via docker --from:\nfrom hakindazz/s6-overlay-base as s6-overlay from alpine3 copy --from=s6-overlay /s6/root / entrypoint [\u0026#34;/init\u0026#34;] happy image building!!! some sources: https://github.com/just-containers/s6-overlay https://github.com/dazz/s6-overlay-base https://hub.docker.com/r/hakindazz/s6-overlay-base https://github.com/dependabot https://docs.renovatebot.com/modules/datasource/github-releases/ ","title":"Build your own s6-overlay base image"},{"date":"2023-01-02","image":"https://blog.dazzlog.de/posts/2023-01-02_environment-variables-in-a-dockerized-symfony//amy-humphries-2M_sDJ_agvs-unsplash.jpg","imageAlt":"","link":"https://blog.dazzlog.de/posts/2023-01-02_environment-variables-in-a-dockerized-symfony/","summary":"\u003cp\u003eI have developed a \u003cstrong\u003eSymfony Web-Application\u003c/strong\u003e, and it runs locally in a dockerized environment with docker-compose. This app is going to be deployed to production as a docker container.\nIn production the handling of environment variables and how they are passed to the container during development is different.\u003c/p\u003e\n\u003ch2 id=\"12-factor-app\"\u003e12 Factor App\u003c/h2\u003e\n\u003cp\u003eA few points from the \u003ca href=\"https://12factor.net\"\u003e12factor methodology\u003c/a\u003e:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://12factor.net/config\"\u003eIII. Config\u003c/a\u003e: Store config in the environment since env vars are easy to change between deploys without changing any code\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://12factor.net/dev-prod-parity\"\u003eX. Dev/prod parity\u003c/a\u003e: Keep development, staging, and production as similar as possible\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eI was searching for options how to handle the differences how environment variables are passed and I found there are at least\u003c/p\u003e","tags":["cd","ci","docker","docker-compose","dotenv","env_file","symfony"],"text":"i have developed a symfony web-application, and it runs locally in a dockerized environment with docker-compose. this app is going to be deployed to production as a docker container. in production the handling of environment variables and how they are passed to the container during development is different.\n12 factor app a few points from the 12factor methodology:\niii. config: store config in the environment since env vars are easy to change between deploys without changing any code x. dev/prod parity: keep development, staging, and production as similar as possible i was searching for options how to handle the differences how environment variables are passed and i found there are at least\n7 ways to pass environment variables to a container env in dockerfile dockerfile args passed at build time to env env passing in docker run as option env_file in docker run as option environment variables in docker-compose.yml env_file in docker compose for each service .env in docker compose substitutes variables in docker-compose.yml and there is even more. if variables are passed to a container there is an order of precedence as follows:\n\u0026#xf400; order of precedence passed from the command line docker compose run --env \u0026lt;key[=[val]]\u0026gt;. passed from/set in compose.yaml service’s configuration, from the environment key. passed from/set in compose.yaml service’s configuration, from the env_file key. passed from/set in container image in the env directive. from https://docs.docker.com/compose/envvars-precedence/\nhow to deal with environment variables in a dockerized symfony the goal all services regardless of which technology they use, should have one streamlined way of how the environment variables should be passed to the application.\nthe big picture we use multiple services which all need to work together services run in docker container we deploy and run services in different compositions for each environment each service has their own sensitive data each service might be a different technology or has a different tech stack steps towards the goal the infrastructure config should be kept in env files but not in the same directory as the application each service gets its own env file to be completely independent of each other, and it gets explicitly set during development each service gets the env variables passed via env file (env_file in docker-compose) every project that has a docker-compose.yml moves the application into an app directory to separate the application from its infrastructure configuration we remove the dotenv component from symfony and define each environment variable that we expect as parameter so the app tells us instantly when a key-value pair is missing in development credentials can be added to the vcs in all other envs the credentials can be either stored and linked on the server or be read from a vault the implementation in symfony the dotenv component is default installed and enabled in the frontcontroller, so when a new app is created there is always a .env file at the project root created with it. read more in the documentation.\nit is not the same .env that docker-compose.yml expects. \u0026#xf071; symfony dotenv and docker compose use the same file name .env docker compose is also using a file named .env to replace the variables in the docker-compose.yml if it is located in the same directory. if you don\u0026rsquo;t know that and put the web apps .env file in the same place then you accidentally might overwrite variables when you think you just updated a variable for the symfony application. we have two different stacks here that both want to use the .env file and both might, but not at the same time, obviously.\nsince we want to use config variables explicitly and not by accident the symfony dotenv component is going to be removed and all config is moved inside environment variable files that are passed into the container.\nthe directory tree to ease the separation of infrastructure and code the application code moves into the ./app directory to be completely separate from the code/config that defines the infrastructure. you see there is no .env file left from symfony. all variables have now moved to the env files inside the devops/env directory.\n. ├── app │ ├── assets │ ├── bin │ ├── ci │ ├── config │ ├── migrations │ ├── node_modules │ ├── public │ │ └── index.php │ ├── src │ ├── templates │ ├── tests │ ├── var │ ├── vendor │ ├── composer.json │ ├── composer.lock │ ├── makefile │ ├── package.json │ ├── symfony.lock │ ├── webpack.config.js │ └── yarn.lock ├── devops │ ├── database │ ├── docker │ │ └── frankenphp │ │ └── dockerfile │ └── env │ ├── app.env │ └── database.env ├── contributing.md ├── docker-compose.prod.yml ├── docker-compose.yml ├── makefile └── readme.md the docker-compose.yml each service gets its own env_file where we can configure the sensitive data for each service.\nversion: \u0026#39;3.9\u0026#39; services: app: image: ghcr.io/c-base/cbag3:dev-latest build: dockerfile: ./devops/docker/frankenphp/dockerfile target: dev env_file: ./devops/env/app.env ports: - 80:80 - 443:443 volumes: - \u0026#39;./app:/app\u0026#39; database: image: postgres:alpine container_name: database env_file: ./devops/env/database.env ports: - 15432:5432 volumes: - ./devops/database:/var/lib/postgresql \u0026#xf400; tip the .env file can be used with docker compose to configure variables inside the docker-compose.yml disable dotenv in frontcontroller and console the dotenv component is disabled since all environment variables have already passed to the container.\n# app/public/index.php \u0026lt;?php use cbase\\app\\kernel; $_server[\u0026#39;app_runtime_options\u0026#39;][\u0026#39;disable_dotenv\u0026#39;] = true; require_once dirname(__dir__).\u0026#39;/vendor/autoload_runtime.php\u0026#39;; return function (array $context) { return new kernel($context[\u0026#39;app_env\u0026#39;], (bool) $context[\u0026#39;app_debug\u0026#39;]); }; # app/bin/console #!/usr/bin/env php \u0026lt;?php use cbase\\app\\kernel; use symfony\\bundle\\frameworkbundle\\console\\application; $_server[\u0026#39;app_runtime_options\u0026#39;][\u0026#39;disable_dotenv\u0026#39;] = true; require_once dirname(__dir__) . \u0026#39;/vendor/autoload_runtime.php\u0026#39;; return function (array $context) { $kernel = new kernel($context[\u0026#39;app_env\u0026#39;], (bool) $context[\u0026#39;app_debug\u0026#39;]); return new application($kernel); }; \u0026#xe756; symfony runtime see described here: configure symfony runtime using options \u0026#xf040; run app only inside container by disabling dotenv we will no longer be able to run the application outside the container (our local machine) unless we set all environment variables there as well. \u0026#xf040; keep dotenv for tests for now, we leave the dotenv for the tests since those environment variables won\u0026rsquo;t change regardless of where they are executed, and they will be executed in the dev container. we could change that by running the tests in their own container, but for now keep the .env.test. don\u0026rsquo;t forget to add the parameters in services.yml # app/config/services.yaml parameters: images.upload.directory: \u0026#39;%env(resolve:images_upload_directory)%\u0026#39; services: _defaults: autowire: true autoconfigure: true bind: string $imagesuploaddirectory: \u0026#39;%images.upload.directory%\u0026#39; since every environment has its own env_file there is the danger of forgetting to add an environment variable to the other environments.\n\u0026#xf400; tip in order to fail early we load the environment variable at the start of the application, by binding it. if we do not bind parameters to variables but just bin them to a service we might miss that we forgot to set an environment variable in the env file since the service might not be loaded in every request. run docker container in production with env-file cat devops/env/app.env # this is a comment images_upload_directory=\u0026#34;%kernel.project_dir%/var/uploads\u0026#34; docker run --env-file devops/env/app.env app env | grep -e \u0026#39;images\u0026#39; images_upload_directory=\u0026#34;%kernel.project_dir%/var/uploads\u0026#34; read more about it in the docker documentation.\nmigration path there is a migration path for projects that use already many config yaml files and want to migrate to environment variables.\n# config/my-app.yaml parameters: images.upload.directory: \u0026#39;%kernel.project_dir%/var/uploads\u0026#39; # config/services.yaml parameters: env(images_upload_directory): \u0026#39;%images.upload.directory%\u0026#39; services: _defaults: bind: string $imagesuploaddirectory: \u0026#39;%env(resolve:images_upload_directory)%\u0026#39; the configuration processor looks up if there is an environment variable images_upload_directory if that is the case, it will be taken, otherwise if it is not found '%images.upload.directory%' will be set to the environment variable. the '%env(resolve:images_upload_directory)%' is bound to a variable $imagesuploaddirectory read more about configuration processors in the symfony documentation about \u0026ldquo;environment variable processors\u0026rdquo;.\nthis would result in the following migration path:\nmake it possible to set variables via environment variables make sure all environments set the corresponding variables remove many quirky unnecessary config files win conclusion we removed the dotenv from symfony and will miss out on all the functionality that came with it, but chose using the env_file as it can be used for running a container, and it can be configured in the docker-compose.yml. the environment configs can be dumped from secret vaults regardless of the tech-stack that the cloud has to offer or kept in a shared directory that won\u0026rsquo;t change between deployments. there will be one explicit way of how each service will get configuration regardless of their environment or tech stack. also, we learned that there is a simple way in symfony to migrate to environment variables.\nhappy continuously deploying everyone more sources environment variables in container vs. docker compose file ","title":"Environment variables in a dockerized Symfony"},{"date":"2022-12-28","image":"https://blog.dazzlog.de/posts/2022-12-28_build-and-push-docker-images-to-ghcr-with-github-actions//dockergithub.png","imageAlt":"","link":"https://blog.dazzlog.de/posts/2022-12-28_build-and-push-docker-images-to-ghcr-with-github-actions/","summary":"\u003cp\u003eWhen you host your project code on GitHub and want to release it as a docker image for deployment or just publish it, the way to go are GitHub actions. Actions are basically hooks that can start CI/DC workflows on repository events.\u003c/p\u003e\n\u003cp\u003eGitHub actions can be used to build and push images to GitHub’s Container Registry which are reachable under \u003ca href=\"https://ghcr.io\"\u003ehttps://ghcr.io\u003c/a\u003e which is part of the package registry. The package registry is not only for docker images, it can also host quite a few other kinds of packages. In this case we’ll focus on docker images.\u003c/p\u003e","tags":["cd","docker","github","github-actions","github-packages"],"text":"when you host your project code on github and want to release it as a docker image for deployment or just publish it, the way to go are github actions. actions are basically hooks that can start ci/dc workflows on repository events.\ngithub actions can be used to build and push images to github’s container registry which are reachable under https://ghcr.io which is part of the package registry. the package registry is not only for docker images, it can also host quite a few other kinds of packages. in this case we’ll focus on docker images.\nprerequisites: github repository basic knowledge about github actions syntax dockerfile the github workflow i created a workflow in my repository under .github/workflow/cd.md and added the following:\nname: continuous delivery on: push: branches: - \u0026#39;main\u0026#39; tags: - \u0026#39;v*.*.*\u0026#39; jobs: build: name: buid and push docker image to github container registry runs-on: ubuntu-latest permissions: packages: write contents: read steps: - name: checkout the repository uses: actions/checkout@v3 - name: docker setup buildx uses: docker/setup-buildx-action@v2.2.1 - name: docker login uses: docker/login-action@v2.1.0 with: registry: ghcr.io username: ${{ github.actor }} password: ${{ secrets.github_token }} - name: build and push docker images uses: docker/build-push-action@v3.2.0 env: registry: ghcr.io image_name: ${{ github.repository }} with: context: . file: ./dockerfile target: final push: true tags: ${{ env.registry }}/${{ env.image_name }}:latest let’s go through the important parts: permissions: actions have access to the repo while running. we should always make sure by setting the permissions, that actions have the minimum access they require. see here: permissions for the github_token\nstep 1–2: checkout the code and setup docker\nstep 3: login to github container registry: this is where the interesting part starts. github.actor is the user that triggers the workflow. for password use secrets.github_token which is a temporary token which is automatically generated for this workflow. see here: publishing images to github-packages.\nstep 4: build and push docker images: if the registry that you want to push to belongs to an organization then you will need to add permissions to create packages. if it lives under your own handle you don’t need to configure anything more since you are the owner already and the secrets.github_token has all the permissions granted.\nthe action will consume the dockerfile and build the image up to the target build step that you can define. in docker the repository where the image will be hosted is also part of the tag. setting the image name to the repository name will create an image with the following tag: ghcr.io/owner/image_name:latest\nread more here: pushing container images\nhappy shipping \\o/ ","title":"Build and push docker images to ghcr.io with GitHub Actions"},{"date":"2022-12-27","image":"https://blog.dazzlog.de/posts/2022-12-27_goodbye-jekyl-hello-hugo//hugo.png","imageAlt":"","link":"https://blog.dazzlog.de/posts/2022-12-27_goodbye-jekyl-hello-hugo/","summary":"\u003cp\u003eI started this blog in March 2013 when I was working for ImagineEasy when I had a few ideas to write down on how I\u0026rsquo;d work with Doctrine Repositories. I still like the idea, but I\u0026rsquo;d probably do it a bit different today. The blog and also how I\u0026rsquo;d work with doctrine.\u003c/p\u003e\n\u003cp\u003eAt the time Jekyll was the way to handle a static file blog. Since then, again, a few things have changed. GitHub is now owned by Microsoft and there are GitHub Actions.\u003c/p\u003e","tags":["blog","cd","git","github","github-actions","hugo","jekyll"],"text":"i started this blog in march 2013 when i was working for imagineeasy when i had a few ideas to write down on how i\u0026rsquo;d work with doctrine repositories. i still like the idea, but i\u0026rsquo;d probably do it a bit different today. the blog and also how i\u0026rsquo;d work with doctrine.\nat the time jekyll was the way to handle a static file blog. since then, again, a few things have changed. github is now owned by microsoft and there are github actions.\njekyll still exists, but all in all i think it was a modern choice at a different time. so what\u0026rsquo;s next then? i must admit i did not look far, it was more a zeitgeist thing that just ran my way.\nsomeone mentioned hugo as a blog that you can easily publish to from obsidian, i\u0026rsquo;m not planning on using that particular feature, but i looked hugo up, and it seems that it is exactly what i was to lazy to look for. a static site generator that uses markdown and can be build by github actions.\nthere is already a huge list of possible themes and many look promising from the thumbnail, but feature wise there is a huge difference. what to look out for:\nhow far is the template deviating from the default, in case you ever want to change the template. which features do you want/need and are they already included, is it complicated to add them later? are there existing installations that are actively used, so they can be used as a reference is there a reference/documentation on how to install it on the host how do you publish new content, are there examples/documentation? what is the version of the technologies in the deploy-chain, old? for every point there is also the question of how complicated each step is.\nas a reference, this is what i ended up doing:\nlocal setup install hugo sudo apt-get install hugo create a new site see the official quick start for more infos.\nhugo new site dazz.github.io cd dazz.github.io git init add a theme look at all the blog themes hugo already has listed.\ni chose hugo-ficurinia as it has the following enabled: tags, categories, fonts i like, simply deploys and looks as promised.\nadd the theme as submodule:\ngit submodule add https://gitlab.com/gabmus/hugo-ficurinia themes/hugo-ficurinia and run a local server to test everything\nhugo server -t hugo-ficurinia add a blog post there is probably nothing much to see, so let\u0026rsquo;s add a new post as draft.\nhugo new posts/hello-world/index.md make sure to read about how to organize the content in directories.\nrun the server and run the server again and also include the draft post\nhugo server -t hugo-ficurinia --builddrafts when you run just hugo -t hugo-ficurinia the site will be build and dumped to public/. that is what we will later do to deploy the site.\ntime to commit all the changed files and add the remote to push everything\ngit remote add origin git@github.com:dazz/dazz.github.io.git git push origin main there will nothing happen yet as we still need to add the github workflow\ndeploy to github pages via github actions mkdir -p .github/workflows touch .github/workflows/pages-deploy.yml # file: .github/workflows/pages-deploy.yml name: \u0026#34;build and deploy gh-pages\u0026#34; on: push: branches: - main paths-ignore: - .gitignore - readme.md - license # allows you to run this workflow manually from the actions tab workflow_dispatch: permissions: contents: write # needed to push to the gh-pages branch pages: write id-token: write # allow one concurrent deployment concurrency: group: \u0026#34;pages\u0026#34; cancel-in-progress: true jobs: build: runs-on: ubuntu-latest steps: # step 1 - checks-out your repository under $github_workspace - name: checkout uses: actions/checkout@v3 with: fetch-depth: 0 submodules: true # step 2 - sets up the latest version of hugo - name: hugo setup uses: peaceiris/actions-hugo@v2.6.0 with: extended: true hugo-version: \u0026#39;latest\u0026#39; # step 3 - adds a cache - uses: actions/cache@v2 with: path: /tmp/hugo_cache key: ${{ runner.os }}-hugomod-${{ hashfiles(\u0026#39;**/go.sum\u0026#39;) }} restore-keys: | ${{ runner.os }}-hugomod- # step 4 - clean and don\u0026#39;t fail - name: clean public directory run: rm -rf public/* # step 5 - builds the site using the latest version of hugo # also specifies the theme we want to use - name: build run: hugo --minify --theme=hugo-ficurinia # step 6 - push our generated site to our gh-pages branch - name: github pages action uses: peaceiris/actions-gh-pages@v3.9.0 with: github_token: ${{ secrets.github_token }} publish_dir: ./public cname: dazz.github.io read more about the options you get when using peaceiris/actions-hugo and peaceiris/actions-gh-pages.\ncustomization now the customization party can start. all the options are listed in the config.toml.\nhappy blogging \\o/ ","title":"Goodbye Jekyll, hello Hugo"},{"date":"2022-12-26","image":"","imageAlt":"","link":"https://blog.dazzlog.de/posts/2022-12-26_hello-world/","summary":"\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eThis is \u003cstrong\u003ebold\u003c/strong\u003e text, and this is \u003cem\u003eemphasized\u003c/em\u003e text.\u003c/p\u003e\n\u003cp\u003eVisit the \u003ca href=\"https://gohugo.io\"\u003eHugo\u003c/a\u003e website!\u003c/p\u003e","tags":["first"],"text":"introduction this is bold text, and this is emphasized text.\nvisit the hugo website!\n","title":"Hello, world!"},{"date":"0001-01-01","image":"","imageAlt":"","link":"https://blog.dazzlog.de/about/","summary":"\u003cp\u003eI love programming and most parts of it is trying to figure out how things can be used to make the life easier for everyone.\u003c/p\u003e\n\u003cp\u003eSymfony is making my life easier since 2012, and since 2021 I\u0026rsquo;m the organizer of the Symfony User Group Berlin.\u003c/p\u003e\n\u003cp\u003eI\u0026rsquo;m member of c-base, the crashed space station in berlin and there I experiment with all the other carbon based\nbeings how to interact in a future compatible way.\u003c/p\u003e","tags":["berlin","dazz","symfony"],"text":"i love programming and most parts of it is trying to figure out how things can be used to make the life easier for everyone.\nsymfony is making my life easier since 2012, and since 2021 i\u0026rsquo;m the organizer of the symfony user group berlin.\ni\u0026rsquo;m member of c-base, the crashed space station in berlin and there i experiment with all the other carbon based beings how to interact in a future compatible way.\nsometimes i talk at conferences about things i discover and think they might be useful for others.\nreferences logo: bild von catalyststuff auf freepik ","title":"about"},{"date":"0001-01-01","image":"","imageAlt":"","link":"https://blog.dazzlog.de/impressum/","summary":"\u003ch2 id=\"angaben-gemäß--5-tmg\"\u003eAngaben gemäß § 5 TMG\u003c/h2\u003e\n\u003cp\u003eAnne Seitz\u003c/p\u003e\n\u003cp\u003eTempelhofer Ufer 1\u003c/p\u003e\n\u003cp\u003e10961 Berlin\u003c/p\u003e\n\u003ch3 id=\"kontakt\"\u003eKontakt:\u003c/h3\u003e\n\u003cp\u003eE-Mail: \u003ca href=\"mailto:dazzlog@gmail.com\"\u003edazzlog@gmail.com\u003c/a\u003e\u003c/p\u003e\n\u003ch2 id=\"verantwortlich-für-den-inhalt-nach--55-abs-2-rstv\"\u003eVerantwortlich für den Inhalt nach § 55 Abs. 2 RStV:\u003c/h2\u003e\n\u003cp\u003eAnne Seitz\u003c/p\u003e\n\u003cp\u003eTempelhofer Ufer 1\u003c/p\u003e\n\u003cp\u003e10961 Berlin\u003c/p\u003e\n\u003ch2 id=\"haftungsausschluss\"\u003eHaftungsausschluss:\u003c/h2\u003e\n\u003ch3 id=\"haftung-für-inhalte\"\u003eHaftung für Inhalte\u003c/h3\u003e\n\u003cp\u003eDie Inhalte unserer Seiten wurden mit größter Sorgfalt erstellt. Für die Richtigkeit, Vollständigkeit und Aktualität der Inhalte können wir jedoch keine Gewähr übernehmen. Als Diensteanbieter sind wir gemäß § 7 Abs.1 TMG für eigene Inhalte auf diesen Seiten nach den allgemeinen Gesetzen verantwortlich. Nach §§ 8 bis 10 TMG sind wir als Diensteanbieter jedoch nicht verpflichtet, übermittelte oder gespeicherte fremde Informationen zu überwachen oder nach Umständen zu forschen, die auf eine rechtswidrige Tätigkeit hinweisen. Verpflichtungen zur Entfernung oder Sperrung der Nutzung von Informationen nach den allgemeinen Gesetzen bleiben hiervon unberührt. Eine diesbezügliche Haftung ist jedoch erst ab dem Zeitpunkt der Kenntnis einer konkreten Rechtsverletzung möglich. Bei Bekanntwerden von entsprechenden Rechtsverletzungen werden wir diese Inhalte umgehend entfernen.\u003c/p\u003e","tags":[],"text":"angaben gemäß § 5 tmg anne seitz\ntempelhofer ufer 1\n10961 berlin\nkontakt: e-mail: dazzlog@gmail.com\nverantwortlich für den inhalt nach § 55 abs. 2 rstv: anne seitz\ntempelhofer ufer 1\n10961 berlin\nhaftungsausschluss: haftung für inhalte die inhalte unserer seiten wurden mit größter sorgfalt erstellt. für die richtigkeit, vollständigkeit und aktualität der inhalte können wir jedoch keine gewähr übernehmen. als diensteanbieter sind wir gemäß § 7 abs.1 tmg für eigene inhalte auf diesen seiten nach den allgemeinen gesetzen verantwortlich. nach §§ 8 bis 10 tmg sind wir als diensteanbieter jedoch nicht verpflichtet, übermittelte oder gespeicherte fremde informationen zu überwachen oder nach umständen zu forschen, die auf eine rechtswidrige tätigkeit hinweisen. verpflichtungen zur entfernung oder sperrung der nutzung von informationen nach den allgemeinen gesetzen bleiben hiervon unberührt. eine diesbezügliche haftung ist jedoch erst ab dem zeitpunkt der kenntnis einer konkreten rechtsverletzung möglich. bei bekanntwerden von entsprechenden rechtsverletzungen werden wir diese inhalte umgehend entfernen.\nhaftung für links unser angebot enthält links zu externen webseiten dritter, auf deren inhalte wir keinen einfluss haben. deshalb können wir für diese fremden inhalte auch keine gewähr übernehmen. für die inhalte der verlinkten seiten ist stets der jeweilige anbieter oder betreiber der seiten verantwortlich. die verlinkten seiten wurden zum zeitpunkt der verlinkung auf mögliche rechtsverstöße überprüft. rechtswidrige inhalte waren zum zeitpunkt der verlinkung nicht erkennbar. eine permanente inhaltliche kontrolle der verlinkten seiten ist jedoch ohne konkrete anhaltspunkte einer rechtsverletzung nicht zumutbar. bei bekanntwerden von rechtsverletzungen werden wir derartige links umgehend entfernen.\nurheberrecht die durch die seitenbetreiber erstellten inhalte und werke auf diesen seiten unterliegen dem deutschen urheberrecht. die vervielfältigung, bearbeitung, verbreitung und jede art der verwertung außerhalb der grenzen des urheberrechtes bedürfen der schriftlichen zustimmung des jeweiligen autors bzw. erstellers. downloads und kopien dieser seite sind nur für den privaten, nicht kommerziellen gebrauch gestattet. soweit die inhalte auf dieser seite nicht vom betreiber erstellt wurden, werden die urheberrechte dritter beachtet. insbesondere werden inhalte dritter als solche gekennzeichnet. sollten sie trotzdem auf eine urheberrechtsverletzung aufmerksam werden, bitten wir um einen entsprechenden hinweis. bei bekanntwerden von rechtsverletzungen werden wir derartige inhalte umgehend entfernen.\ndatenschutz die nutzung unserer webseite ist in der regel ohne angabe personenbezogener daten möglich. soweit auf unseren seiten personenbezogene daten (beispielsweise name, anschrift oder email-adressen) erhoben werden, erfolgt dies, soweit möglich, stets auf freiwilliger basis. diese daten werden ohne ihre ausdrückliche zustimmung nicht an dritte weitergegeben. wir weisen darauf hin, dass die datenübertragung im internet (z.b. bei der kommunikation per e-mail) sicherheitslücken aufweisen kann. ein lückenloser schutz der daten vor dem zugriff durch dritte ist nicht möglich. der nutzung von im rahmen der impressumspflicht veröffentlichten kontaktdaten durch dritte zur übersendung von nicht ausdrücklich angeforderter werbung und informationsmaterialien wird hiermit ausdrücklich widersprochen. die betreiber der seiten behalten sich ausdrücklich rechtliche schritte im falle der unverlangten zusendung von werbeinformationen, etwa durch spam-mails, vor.\ngoogle analytics diese website benutzt google analytics, einen webanalysedienst der google inc. (\u0026lsquo;\u0026lsquo;google\u0026rsquo;\u0026rsquo;). google analytics verwendet sog. \u0026lsquo;\u0026lsquo;cookies\u0026rsquo;\u0026rsquo;, textdateien, die auf ihrem computer gespeichert werden und die eine analyse der benutzung der website durch sie ermöglicht. die durch den cookie erzeugten informationen über ihre benutzung dieser website (einschließlich ihrer ip-adresse) wird an einen server von google in den usa übertragen und dort gespeichert. google wird diese informationen benutzen, um ihre nutzung der website auszuwerten, um reports über die websiteaktivitäten für die websitebetreiber zusammenzustellen und um weitere mit der websitenutzung und der internetnutzung verbundene dienstleistungen zu erbringen. auch wird google diese informationen gegebenenfalls an dritte übertragen, sofern dies gesetzlich vorgeschrieben oder soweit dritte diese daten im auftrag von google verarbeiten. google wird in keinem fall ihre ip-adresse mit anderen daten der google in verbindung bringen. sie können die installation der cookies durch eine entsprechende einstellung ihrer browser software verhindern; wir weisen sie jedoch darauf hin, dass sie in diesem fall gegebenenfalls nicht sämtliche funktionen dieser website voll umfänglich nutzen können. durch die nutzung dieser website erklären sie sich mit der bearbeitung der über sie erhobenen daten durch google in der zuvor beschriebenen art und weise und zu dem zuvor benannten zweck einverstanden.\ngoogle adsense diese website benutzt google adsense, einen webanzeigendienst der google inc., usa (\u0026lsquo;\u0026lsquo;google\u0026rsquo;\u0026rsquo;). google adsense verwendet sog. \u0026lsquo;\u0026lsquo;cookies\u0026rsquo;\u0026rsquo; (textdateien), die auf ihrem computer gespeichert werden und die eine analyse der benutzung der website durch sie ermöglicht. google adsense verwendet auch sog. \u0026lsquo;\u0026lsquo;web beacons\u0026rsquo;\u0026rsquo; (kleine unsichtbare grafiken) zur sammlung von informationen. durch die verwendung des web beacons können einfache aktionen wie der besucherverkehr auf der webseite aufgezeichnet und gesammelt werden. die durch den cookie und/oder web beacon erzeugten informationen über ihre benutzung dieser website (einschließlich ihrer ip-adresse) werden an einen server von google in den usa übertragen und dort gespeichert. google wird diese informationen benutzen, um ihre nutzung der website im hinblick auf die anzeigen auszuwerten, um reports über die websiteaktivitäten und anzeigen für die websitebetreiber zusammenzustellen und um weitere mit der websitenutzung und der internetnutzung verbundene dienstleistungen zu erbringen. auch wird google diese informationen gegebenenfalls an dritte übertragen, sofern dies gesetzlich vorgeschrieben oder soweit dritte diese daten im auftrag von google verarbeiten. google wird in keinem fall ihre ip-adresse mit anderen daten der google in verbindung bringen. das speichern von cookies auf ihrer festplatte und die anzeige von web beacons können sie verhindern, indem sie in ihren browser-einstellungen \u0026lsquo;\u0026lsquo;keine cookies akzeptieren\u0026rsquo;\u0026rsquo; wählen (im ms internet-explorer unter \u0026lsquo;\u0026lsquo;extras \u0026gt; internetoptionen \u0026gt; datenschutz \u0026gt; einstellung\u0026rsquo;\u0026rsquo;; im firefox unter \u0026lsquo;\u0026lsquo;extras \u0026gt; einstellungen \u0026gt; datenschutz \u0026gt; cookies\u0026rsquo;\u0026rsquo;); wir weisen sie jedoch darauf hin, dass sie in diesem fall gegebenenfalls nicht sämtliche funktionen dieser website voll umfänglich nutzen können. durch die nutzung dieser website erklären sie sich mit der bearbeitung der über sie erhobenen daten durch google in der zuvor beschriebenen art und weise und zu dem zuvor benannten zweck einverstanden.\nwebsite impressum erstellt durch impressum-generator.de von der kanzlei hasselbach\n","title":"impressum"},{"date":"0001-01-01","image":"","imageAlt":"","link":"https://blog.dazzlog.de/talks/","summary":"\u003ch2 id=\"2025\"\u003e2025\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://live.symfony.com/2025-berlin/\"\u003eSymfonyLive Berlin 2025\u003c/a\u003e – \u003ca href=\"https://live.symfony.com/2025-berlin/schedule/running-symfony-in-a-multi-process-container\"\u003eRunning Symfony in a Multi-Process Container\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"2024\"\u003e2024\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://live.symfony.com/2024-vienna-con/\"\u003eSymfonyCon Vienna 2024\u003c/a\u003e – \u003ca href=\"https://live.symfony.com/2024-vienna-con/schedule/running-symfony-in-a-multi-process-container\"\u003eRunning Symfony in a Multi-Process Container\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://phpdd.org/\"\u003e#PHPDD24\u003c/a\u003e – \u003ca href=\"https://phpdd.org/#speaker-7\"\u003eRunning PHP-Applications in a Multi-Process Container\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.meetup.com/de-DE/sfugberlin\"\u003eSymfony User Group Berlin\u003c/a\u003e - \u003ca href=\"https://www.meetup.com/de-DE/sfugberlin/events/303072411\"\u003es6-overlay: Symfony in a Multi-Process container\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"2023\"\u003e2023\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://live.symfony.com/2023-brussels-con/\"\u003eSymfonyCon Brussels 2023\u003c/a\u003e – From Chaos to Control: Exception Handling in Symfony\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://live.symfony.com/2023-berlin/\"\u003eSymfonyLive Berlin 2023\u003c/a\u003e – \u003ca href=\"https://speakerdeck.com/dazz/von-chaos-zu-kontrolle-exception-handling-in-symfony\"\u003eVon Chaos zu Kontrolle: Exception Handling in\nSymfony\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.meetup.com/de-DE/sfugberlin\"\u003eSymfony User Group Berlin\u003c/a\u003e - \u003ca href=\"https://www.meetup.com/de-DE/sfugberlin/events/296791213\"\u003eFrom Chaos to Control: Exception Handling in Symfony\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"2018\"\u003e2018\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://live.symfony.com/2018-berlin/\"\u003eSymfonyLive Berlin 2018\u003c/a\u003e – \u003ca href=\"https://speakerdeck.com/dazz/wie-man-dinge-gut-benennt\"\u003eWie man Dinge gut benennt: Naming things\nconsidered hard\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"2015\"\u003e2015\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003ePHPUK15 – \u003ca href=\"https://speakerdeck.com/dazz/naming-things\"\u003eNaming things – The art of writing meaningful code\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"2014\"\u003e2014\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://www.bephpug.de/\"\u003eBePhpUg\u003c/a\u003e – \u003ca href=\"https://speakerdeck.com/dazz/nomen-est-omen-naming-things-considered-hard\"\u003eNomen est Omen - Naming things considered hard\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e","tags":[],"text":"2025 symfonylive berlin 2025 – running symfony in a multi-process container 2024 symfonycon vienna 2024 – running symfony in a multi-process container #phpdd24 – running php-applications in a multi-process container symfony user group berlin - s6-overlay: symfony in a multi-process container 2023 symfonycon brussels 2023 – from chaos to control: exception handling in symfony symfonylive berlin 2023 – von chaos zu kontrolle: exception handling in symfony symfony user group berlin - from chaos to control: exception handling in symfony 2018 symfonylive berlin 2018 – wie man dinge gut benennt: naming things considered hard 2015 phpuk15 – naming things – the art of writing meaningful code 2014 bephpug – nomen est omen - naming things considered hard ","title":"talks"},{"date":"0001-01-01","image":"","imageAlt":"","link":"https://blog.dazzlog.de/ui/","summary":"\u003ch2 id=\"admonition\"\u003eAdmonition\u003c/h2\u003e\n\u003cdiv class=\"details admonition note open\"\u003e\n  \u003cdiv class=\"details-summary admonition-title\"\u003e\n    \u003ci class=\"icon \"\u003e\u0026#Xf040;\u003c/i\u003e This is a note\u003ci class=\"details-icon fas fa-angle-right fa-fw\"\u003e\u003c/i\u003e\n  \u003c/div\u003e\n  \u003cdiv class=\"details-content\"\u003e\n    \u003cdiv class=\"admonition-content\"\u003eUse the note shortcode when you want to draw attention to information subtly. note is intended to be less of an interruption in content than is warning.\u003c/div\u003e\n  \u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv class=\"details admonition abstract open\"\u003e\n  \u003cdiv class=\"details-summary admonition-title\"\u003e\n    \u003ci class=\"icon \"\u003e\u0026#xf15c;\u003c/i\u003e This is a abstract\u003ci class=\"details-icon fas fa-angle-right fa-fw\"\u003e\u003c/i\u003e\n  \u003c/div\u003e\n  \u003cdiv class=\"details-content\"\u003e\n    \u003cdiv class=\"admonition-content\"\u003eLorem Ipsum\u003c/div\u003e\n  \u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv class=\"details admonition info open\"\u003e\n  \u003cdiv class=\"details-summary admonition-title\"\u003e\n    \u003ci class=\"icon \"\u003e\u0026#xf05a;\u003c/i\u003e This is an info\u003ci class=\"details-icon fas fa-angle-right fa-fw\"\u003e\u003c/i\u003e\n  \u003c/div\u003e\n  \u003cdiv class=\"details-content\"\u003e\n    \u003cdiv class=\"admonition-content\"\u003eLorem Ipsum\u003c/div\u003e\n  \u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv class=\"details admonition tip open\"\u003e\n  \u003cdiv class=\"details-summary admonition-title\"\u003e\n    \u003ci class=\"icon \"\u003e\u0026#xf400;\u003c/i\u003e This is a tip\u003ci class=\"details-icon fas fa-angle-right fa-fw\"\u003e\u003c/i\u003e\n  \u003c/div\u003e\n  \u003cdiv class=\"details-content\"\u003e\n    \u003cdiv class=\"admonition-content\"\u003eUse the tip shortcode when you want to give the reader advice. tip, like note, is intended to be less of an interruption in content than is warning.\u003c/div\u003e\n  \u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv class=\"details admonition success open\"\u003e\n  \u003cdiv class=\"details-summary admonition-title\"\u003e\n    \u003ci class=\"icon \"\u003e\u0026#xf058;\u003c/i\u003e This is a success\u003ci class=\"details-icon fas fa-angle-right fa-fw\"\u003e\u003c/i\u003e\n  \u003c/div\u003e\n  \u003cdiv class=\"details-content\"\u003e\n    \u003cdiv class=\"admonition-content\"\u003eLorem Ipsum\u003c/div\u003e\n  \u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv class=\"details admonition question open\"\u003e\n  \u003cdiv class=\"details-summary admonition-title\"\u003e\n    \u003ci class=\"icon \"\u003e\u0026#xf128;\u003c/i\u003e This is a question\u003ci class=\"details-icon fas fa-angle-right fa-fw\"\u003e\u003c/i\u003e\n  \u003c/div\u003e\n  \u003cdiv class=\"details-content\"\u003e\n    \u003cdiv class=\"admonition-content\"\u003eLorem Ipsum\u003c/div\u003e\n  \u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv class=\"details admonition warning open\"\u003e\n  \u003cdiv class=\"details-summary admonition-title\"\u003e\n    \u003ci class=\"icon \"\u003e\u0026#xf071;\u003c/i\u003e This is an warning\u003ci class=\"details-icon fas fa-angle-right fa-fw\"\u003e\u003c/i\u003e\n  \u003c/div\u003e\n  \u003cdiv class=\"details-content\"\u003e\n    \u003cdiv class=\"admonition-content\"\u003eUse the warning shortcode when you want to draw the user’s attention to something important. A good usage example is for articulating breaking changes in Hugo versions, known bugs, or templating “gotchas.”\u003c/div\u003e\n  \u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv class=\"details admonition failure open\"\u003e\n  \u003cdiv class=\"details-summary admonition-title\"\u003e\n    \u003ci class=\"icon \"\u003e\u0026#xf057;\u003c/i\u003e This is a failure\u003ci class=\"details-icon fas fa-angle-right fa-fw\"\u003e\u003c/i\u003e\n  \u003c/div\u003e\n  \u003cdiv class=\"details-content\"\u003e\n    \u003cdiv class=\"admonition-content\"\u003eLorem Ipsum\u003c/div\u003e\n  \u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv class=\"details admonition danger open\"\u003e\n  \u003cdiv class=\"details-summary admonition-title\"\u003e\n    \u003ci class=\"icon \"\u003e\u0026#xfb8a;\u003c/i\u003e This is danger\u003ci class=\"details-icon fas fa-angle-right fa-fw\"\u003e\u003c/i\u003e\n  \u003c/div\u003e\n  \u003cdiv class=\"details-content\"\u003e\n    \u003cdiv class=\"admonition-content\"\u003eLorem Ipsum\u003c/div\u003e\n  \u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv class=\"details admonition bug open\"\u003e\n  \u003cdiv class=\"details-summary admonition-title\"\u003e\n    \u003ci class=\"icon \"\u003e\u0026#xf188;\u003c/i\u003e This is a bug\u003ci class=\"details-icon fas fa-angle-right fa-fw\"\u003e\u003c/i\u003e\n  \u003c/div\u003e\n  \u003cdiv class=\"details-content\"\u003e\n    \u003cdiv class=\"admonition-content\"\u003eLorem Ipsum\u003c/div\u003e\n  \u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv class=\"details admonition example open\"\u003e\n  \u003cdiv class=\"details-summary admonition-title\"\u003e\n    \u003ci class=\"icon \"\u003e\u0026#Xf03a;\u003c/i\u003e This is an example\u003ci class=\"details-icon fas fa-angle-right fa-fw\"\u003e\u003c/i\u003e\n  \u003c/div\u003e\n  \u003cdiv class=\"details-content\"\u003e\n    \u003cdiv class=\"admonition-content\"\u003eLorem Ipsum\u003c/div\u003e\n  \u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv class=\"details admonition quote open\"\u003e\n  \u003cdiv class=\"details-summary admonition-title\"\u003e\n    \u003ci class=\"icon \"\u003e\u0026#xf10d;\u003c/i\u003e This is a quote\u003ci class=\"details-icon fas fa-angle-right fa-fw\"\u003e\u003c/i\u003e\n  \u003c/div\u003e\n  \u003cdiv class=\"details-content\"\u003e\n    \u003cdiv class=\"admonition-content\"\u003eLorem Ipsum\u003c/div\u003e\n  \u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv class=\"details admonition symfony open\"\u003e\n  \u003cdiv class=\"details-summary admonition-title\"\u003e\n    \u003ci class=\"icon \"\u003e\u0026#xe756;\u003c/i\u003e This is a symfony\u003ci class=\"details-icon fas fa-angle-right fa-fw\"\u003e\u003c/i\u003e\n  \u003c/div\u003e\n  \u003cdiv class=\"details-content\"\u003e\n    \u003cdiv class=\"admonition-content\"\u003eLorem Ipsum\u003c/div\u003e\n  \u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv class=\"details admonition php open\"\u003e\n  \u003cdiv class=\"details-summary admonition-title\"\u003e\n    \u003ci class=\"icon \"\u003e\u0026#xe73d;\u003c/i\u003e This is a php\u003ci class=\"details-icon fas fa-angle-right fa-fw\"\u003e\u003c/i\u003e\n  \u003c/div\u003e\n  \u003cdiv class=\"details-content\"\u003e\n    \u003cdiv class=\"admonition-content\"\u003eLorem Ipsum\u003c/div\u003e\n  \u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv class=\"details admonition docker open\"\u003e\n  \u003cdiv class=\"details-summary admonition-title\"\u003e\n    \u003ci class=\"icon \"\u003e\u0026#xf308;\u003c/i\u003e This is a docker\u003ci class=\"details-icon fas fa-angle-right fa-fw\"\u003e\u003c/i\u003e\n  \u003c/div\u003e\n  \u003cdiv class=\"details-content\"\u003e\n    \u003cdiv class=\"admonition-content\"\u003eLorem Ipsum\u003c/div\u003e\n  \u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv class=\"details admonition tldr open\"\u003e\n  \u003cdiv class=\"details-summary admonition-title\"\u003e\n    \u003ci class=\"icon \"\u003e\u0026#xf259;\u003c/i\u003e This is a tldr;\u003ci class=\"details-icon fas fa-angle-right fa-fw\"\u003e\u003c/i\u003e\n  \u003c/div\u003e\n  \u003cdiv class=\"details-content\"\u003e\n    \u003cdiv class=\"admonition-content\"\u003eLorem Ipsum\u003c/div\u003e\n  \u003c/div\u003e\n\u003c/div\u003e\n\u003ch2 id=\"fontawesome-cheat-sheet\"\u003eFontAwesome cheat sheet\u003c/h2\u003e\n\u003cp\u003e\u003ca href=\"https://forkaweso.me/Fork-Awesome/cheatsheet/\"\u003ehttps://forkaweso.me/Fork-Awesome/cheatsheet/\u003c/a\u003e\u003c/p\u003e","tags":["ui"],"text":"admonition \u0026#xf040; this is a note use the note shortcode when you want to draw attention to information subtly. note is intended to be less of an interruption in content than is warning. \u0026#xf15c; this is a abstract lorem ipsum \u0026#xf05a; this is an info lorem ipsum \u0026#xf400; this is a tip use the tip shortcode when you want to give the reader advice. tip, like note, is intended to be less of an interruption in content than is warning. \u0026#xf058; this is a success lorem ipsum \u0026#xf128; this is a question lorem ipsum \u0026#xf071; this is an warning use the warning shortcode when you want to draw the user’s attention to something important. a good usage example is for articulating breaking changes in hugo versions, known bugs, or templating “gotchas.” \u0026#xf057; this is a failure lorem ipsum \u0026#xfb8a; this is danger lorem ipsum \u0026#xf188; this is a bug lorem ipsum \u0026#xf03a; this is an example lorem ipsum \u0026#xf10d; this is a quote lorem ipsum \u0026#xe756; this is a symfony lorem ipsum \u0026#xe73d; this is a php lorem ipsum \u0026#xf308; this is a docker lorem ipsum \u0026#xf259; this is a tldr; lorem ipsum fontawesome cheat sheet https://forkaweso.me/fork-awesome/cheatsheet/\n","title":"ui"}]}