<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Symfony on DazzLog</title><link>https://blog.dazzlog.de/tags/symfony/</link><description>Recent content in Symfony on DazzLog</description><generator>Hugo</generator><language>en-us</language><copyright>dazz - [Creative Commons Attribution 4.0 International License](https://creativecommons.org/licenses/by/4.0/).</copyright><lastBuildDate>Fri, 16 Aug 2024 23:42:23 +0100</lastBuildDate><atom:link href="https://blog.dazzlog.de/tags/symfony/index.xml" rel="self" type="application/rss+xml"/><item><title>Dynamic Route loading in a non standard Symfony structure</title><link>https://blog.dazzlog.de/posts/2024-08-16_dynamic-route-loading-symfony/</link><pubDate>Fri, 16 Aug 2024 23:42:23 +0100</pubDate><guid>https://blog.dazzlog.de/posts/2024-08-16_dynamic-route-loading-symfony/</guid><description>When you divert from Symfony&amp;rsquo;s standard structure there are some things that do not work out of the box anymore. One of it is routing.
Default Symfony If you start a fresh Symfony project you will be presented with the following stricture:
app/src ├─ Controller ├─ Entity ├─ Repository └─ Kernel.php The routing config looks like this:
# app/config/routes.yaml controllers: resource: path: ../src/Controller/ namespace: App\Controller type: attribute So the Controller directory is the place all controllers go you might think first.</description></item><item><title>Environment variables in a dockerized Symfony</title><link>https://blog.dazzlog.de/posts/2023-01-02_environment-variables-in-a-dockerized-symfony/</link><pubDate>Mon, 02 Jan 2023 19:24:18 +0100</pubDate><guid>https://blog.dazzlog.de/posts/2023-01-02_environment-variables-in-a-dockerized-symfony/</guid><description>I have developed a Symfony Web-Application, and it runs locally in a dockerized environment with docker-compose. This app is going to be deployed to production as a docker container. In production the handling of environment variables and how they are passed to the container during development is different.
12 Factor App A few points from the 12factor methodology:
III. Config: Store config in the environment since env vars are easy to change between deploys without changing any code X.</description></item><item><title>about</title><link>https://blog.dazzlog.de/about/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://blog.dazzlog.de/about/</guid><description>I love programming and most parts of it is trying to figure out how things can be used to make the life easier for everyone.
Symfony is making my life easier since 2012, and I&amp;rsquo;m now the organizer of the Symfony Usergroup Berlin.
I&amp;rsquo;m member of c-base the crashed space station in berlin and there I experiment with all the other carbon based beings how to interact in a future compatible style.</description></item></channel></rss>