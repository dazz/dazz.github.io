<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Ci on DazzLog</title><link>https://blog.dazzlog.de/tags/ci/</link><description>Recent content in Ci on DazzLog</description><generator>Hugo</generator><language>en-us</language><copyright>dazz - [Creative Commons Attribution 4.0 International License](https://creativecommons.org/licenses/by/4.0/).</copyright><lastBuildDate>Mon, 02 Jan 2023 19:24:18 +0100</lastBuildDate><atom:link href="https://blog.dazzlog.de/tags/ci/index.xml" rel="self" type="application/rss+xml"/><item><title>Environment variables in a dockerized Symfony</title><link>https://blog.dazzlog.de/posts/2023-01-02_environment-variables-in-a-dockerized-symfony/</link><pubDate>Mon, 02 Jan 2023 19:24:18 +0100</pubDate><guid>https://blog.dazzlog.de/posts/2023-01-02_environment-variables-in-a-dockerized-symfony/</guid><description>I have developed a Symfony Web-Application, and it runs locally in a dockerized environment with docker-compose. This app is going to be deployed to production as a docker container. In production the handling of environment variables and how they are passed to the container during development is different.
12 Factor App A few points from the 12factor methodology:
III. Config: Store config in the environment since env vars are easy to change between deploys without changing any code X.</description></item></channel></rss>