<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on DazzLog</title><link>https://blog.dazzlog.de/posts/</link><description>Recent content in Posts on DazzLog</description><generator>Hugo</generator><language>en-us</language><copyright>dazz - [Creative Commons Attribution 4.0 International License](https://creativecommons.org/licenses/by/4.0/).</copyright><lastBuildDate>Fri, 16 Aug 2024 23:42:23 +0100</lastBuildDate><atom:link href="https://blog.dazzlog.de/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>Dynamic Route loading in a non standard Symfony structure</title><link>https://blog.dazzlog.de/posts/2024-08-16_dynamic-route-loading-symfony/</link><pubDate>Fri, 16 Aug 2024 23:42:23 +0100</pubDate><guid>https://blog.dazzlog.de/posts/2024-08-16_dynamic-route-loading-symfony/</guid><description>When you divert from Symfony&amp;rsquo;s standard structure there are some things that do not work out of the box anymore. One of it is routing.
Default Symfony If you start a fresh Symfony project you will be presented with the following stricture:
app/src ├─ Controller ├─ Entity ├─ Repository └─ Kernel.php The routing config looks like this:
# app/config/routes.yaml controllers: resource: path: ../src/Controller/ namespace: App\Controller type: attribute So the Controller directory is the place all controllers go you might think first.</description></item><item><title>Environment variables in a dockerized Symfony</title><link>https://blog.dazzlog.de/posts/2023-01-02_environment-variables-in-a-dockerized-symfony/</link><pubDate>Mon, 02 Jan 2023 19:24:18 +0100</pubDate><guid>https://blog.dazzlog.de/posts/2023-01-02_environment-variables-in-a-dockerized-symfony/</guid><description>I have developed a Symfony Web-Application, and it runs locally in a dockerized environment with docker-compose. This app is going to be deployed to production as a docker container. In production the handling of environment variables and how they are passed to the container during development is different.
12 Factor App A few points from the 12factor methodology:
III. Config: Store config in the environment since env vars are easy to change between deploys without changing any code X.</description></item><item><title>Build and push docker images to ghcr.io with GitHub Actions</title><link>https://blog.dazzlog.de/posts/2022-12-28_build-and-push-docker-images-to-ghcr-with-github-actions/</link><pubDate>Wed, 28 Dec 2022 00:25:38 +0100</pubDate><guid>https://blog.dazzlog.de/posts/2022-12-28_build-and-push-docker-images-to-ghcr-with-github-actions/</guid><description>When you host your project code on GitHub and want to release it as a docker image for deployment or just publish it, the way to go are GitHub actions. Actions are basically hooks that can start CI/DC workflows on repository events.
GitHub actions can be used to build and push images to GitHub’s Container Registry which are reachable under https://ghcr.io which is part of the package registry. The package registry is not only for docker images, it can also host quite a few other kinds of packages.</description></item><item><title>Goodbye Jekyll, hello Hugo</title><link>https://blog.dazzlog.de/posts/2022-12-27_goodbye-jekyl-hello-hugo/</link><pubDate>Tue, 27 Dec 2022 17:44:27 +0100</pubDate><guid>https://blog.dazzlog.de/posts/2022-12-27_goodbye-jekyl-hello-hugo/</guid><description>I started this blog in March 2013 when I was working for ImagineEasy when I had a few ideas to write down on how I&amp;rsquo;d work with Doctrine Repositories. I still like the idea, but I&amp;rsquo;d probably do it a bit different today. The blog and also how I&amp;rsquo;d work with doctrine.
At the time Jekyll was the way to handle a static file blog. Since then, again, a few things have changed.</description></item><item><title>Hello, world!</title><link>https://blog.dazzlog.de/posts/2022-12-26_hello-world/</link><pubDate>Mon, 26 Dec 2022 21:29:35 +0100</pubDate><guid>https://blog.dazzlog.de/posts/2022-12-26_hello-world/</guid><description>Introduction This is bold text, and this is emphasized text.
Visit the Hugo website!</description></item></channel></rss>