<?xml version="1.0" encoding="utf-8" standalone="yes"?><?xml-stylesheet href="/feed_style.xsl" type="text/xsl"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:media="https://www.rssboard.org/media-rss"><channel><title>DazzLog</title><link>https://blog.dazzlog.de/</link><description>Recent content on DazzLog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>dazz - [Creative Commons Attribution 4.0 International License](https://creativecommons.org/licenses/by/4.0/).</copyright><lastBuildDate>Mon, 19 Aug 2024 23:42:23 +0100</lastBuildDate><atom:link href="https://blog.dazzlog.de/index.xml" rel="self" type="application/rss+xml"/><icon>https://blog.dazzlog.de/logo.svg</icon><item><title>Build your own s6-overlay base image</title><link>https://blog.dazzlog.de/posts/2024-08-19_base-image-with-s6-overlay/</link><pubDate>Mon, 19 Aug 2024 23:42:23 +0100</pubDate><guid>https://blog.dazzlog.de/posts/2024-08-19_base-image-with-s6-overlay/</guid><description><![CDATA[<p>S6-overlay is a container-focused process manager that offers end-to-end management of the container&rsquo;s lifecycle, from initialization to graceful shutdown.</p>
<p>To make use of s6-overlay we need to add the binaries to our container by adding, extracting and then moving them to the directory where they are expected.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-Dockerfile" data-lang="Dockerfile"><span style="display:flex;"><span><span style="color:#ff79c6">ADD</span> https://github.com/just-containers/s6-overlay/releases/download/3.2.0.0/s6-overlay-noarch.tar.xz /tmp  
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">ADD</span> https://github.com/just-containers/s6-overlay/releases/download/3.2.0.0/s6-overlay-x86_64.tar.xz /tmp
</span></span></code></pre></div><h2 id="update-dependencies">Update dependencies</h2>
<p>When adding the s6-overlay sources to in a <code>Dockerfile</code> we want to make sure that we get notified when a new version
is available, so we can always be up-to-date with all our libraries. This can be achieved by adding a section to our <a href="https://github.com/renovatebot/renovate">Renovate</a> or <a href="https://github.com/dependabot">Dependabot</a> config, a rule to match</p>
<h2 id="version-checker-know-about-docker-from">Version checker know about Docker <code>FROM</code></h2>
<p>If we leverage the <code>FROM</code> of docker to include our sources we would not need to add anything. I already use the way of loading sources via images in several places:</p>
<h3 id="include-composer">include composer</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-Dockerfile" data-lang="Dockerfile"><span style="display:flex;"><span><span style="color:#ff79c6">FROM</span><span style="color:#f1fa8c"> composer:2.7.7 AS composer</span>
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">COPY</span> --from<span style="color:#ff79c6">=</span>composer /usr/bin/composer /usr/bin/composer
</span></span></code></pre></div><h3 id="include-extension-installer">include extension-installer</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-Dockerfile" data-lang="Dockerfile"><span style="display:flex;"><span><span style="color:#ff79c6">FROM</span><span style="color:#f1fa8c"> mlocati/php-extension-installer:2.2.16 AS php-extension-installer</span>
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">COPY</span> --from<span style="color:#ff79c6">=</span>php-extension-installer /usr/bin/install-php-extensions /usr/local/bin/
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">RUN</span> install-php-extensions <span style="color:#f1fa8c">\
</span></span></span><span style="display:flex;"><span><span style="color:#f1fa8c"></span>  xdebug <span style="color:#f1fa8c">\
</span></span></span><span style="display:flex;"><span><span style="color:#f1fa8c"></span>  zip <span style="color:#f1fa8c">\
</span></span></span><span style="display:flex;"><span><span style="color:#f1fa8c"></span>;
</span></span></code></pre></div><p>But there is no base image for s6-overlay from justcontainers/s6-overlay . There are some other vendors, but they are opinionated and do more things that are helpful to their case.</p>
<h2 id="build-your-own-s6-overlay-base-image">Build your own s6-overlay base image</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-Dockerfile" data-lang="Dockerfile"><span style="display:flex;"><span><span style="color:#ff79c6">FROM</span><span style="color:#f1fa8c"> alpine:3 AS s6</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">ARG</span> TARGETARCH
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">ARG</span> TARGETVARIANT
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">ARG</span> S6_RELEASE
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">RUN</span> apk add --no-cache curl jq <span style="color:#f1fa8c">\
</span></span></span><span style="display:flex;"><span><span style="color:#f1fa8c"></span>    <span style="color:#ff79c6">&amp;&amp;</span> <span style="color:#ff79c6">if</span> <span style="color:#ff79c6">[</span> -z <span style="color:#f1fa8c">${</span><span style="color:#8be9fd;font-style:italic">S6_RELEASE</span><span style="color:#f1fa8c">}</span> <span style="color:#ff79c6">]</span>; <span style="color:#ff79c6">then</span> <span style="color:#f1fa8c">\
</span></span></span><span style="display:flex;"><span><span style="color:#f1fa8c"></span>         <span style="color:#8be9fd;font-style:italic">S6_RELEASE</span><span style="color:#ff79c6">=</span><span style="color:#ff79c6">$(</span>curl -s https://api.github.com/repos/just-containers/s6-overlay/releases/latest | jq -r <span style="color:#f1fa8c">&#39;.tag_name&#39;</span> | cut -c2-<span style="color:#ff79c6">)</span>; <span style="color:#f1fa8c">\
</span></span></span><span style="display:flex;"><span><span style="color:#f1fa8c"></span>       <span style="color:#ff79c6">fi</span> <span style="color:#f1fa8c">\
</span></span></span><span style="display:flex;"><span><span style="color:#f1fa8c"></span>    <span style="color:#ff79c6">&amp;&amp;</span> <span style="color:#8be9fd;font-style:italic">S6_PLATFORM</span><span style="color:#ff79c6">=</span><span style="color:#ff79c6">$(case</span> <span style="color:#f1fa8c">&#34;</span><span style="color:#f1fa8c">${</span><span style="color:#8be9fd;font-style:italic">TARGETARCH</span><span style="color:#f1fa8c">}</span><span style="color:#f1fa8c">/</span><span style="color:#f1fa8c">${</span><span style="color:#8be9fd;font-style:italic">TARGETVARIANT</span><span style="color:#f1fa8c">}</span><span style="color:#f1fa8c">&#34;</span> in <span style="color:#f1fa8c">\
</span></span></span><span style="display:flex;"><span><span style="color:#f1fa8c"></span>         <span style="color:#f1fa8c">&#34;arm/v7&#34;</span><span style="color:#ff79c6">)</span>   <span style="color:#8be9fd;font-style:italic">echo</span> <span style="color:#f1fa8c">&#34;armhf&#34;</span>;; <span style="color:#f1fa8c">\
</span></span></span><span style="display:flex;"><span><span style="color:#f1fa8c"></span>         <span style="color:#f1fa8c">&#34;arm64/&#34;</span><span style="color:#ff79c6">)</span>   <span style="color:#8be9fd;font-style:italic">echo</span> <span style="color:#f1fa8c">&#34;aarch64&#34;</span>;; <span style="color:#f1fa8c">\
</span></span></span><span style="display:flex;"><span><span style="color:#f1fa8c"></span>         *<span style="color:#ff79c6">)</span>          <span style="color:#8be9fd;font-style:italic">echo</span> <span style="color:#f1fa8c">&#34;x86_64&#34;</span>;; <span style="color:#f1fa8c">\
</span></span></span><span style="display:flex;"><span><span style="color:#f1fa8c"></span>       <span style="color:#ff79c6">esac</span><span style="color:#ff79c6">)</span> <span style="color:#f1fa8c">\
</span></span></span><span style="display:flex;"><span><span style="color:#f1fa8c"></span>    <span style="color:#ff79c6">&amp;&amp;</span> <span style="color:#8be9fd;font-style:italic">echo</span> <span style="color:#f1fa8c">&#34;Using s6 release </span><span style="color:#f1fa8c">${</span><span style="color:#8be9fd;font-style:italic">S6_RELEASE</span><span style="color:#f1fa8c">}</span><span style="color:#f1fa8c"> platform </span><span style="color:#f1fa8c">${</span><span style="color:#8be9fd;font-style:italic">S6_PLATFORM</span><span style="color:#f1fa8c">}</span><span style="color:#f1fa8c">&#34;</span> <span style="color:#f1fa8c">\
</span></span></span><span style="display:flex;"><span><span style="color:#f1fa8c"></span>    <span style="color:#ff79c6">&amp;&amp;</span> curl -sSL <span style="color:#f1fa8c">&#34;https://github.com/just-containers/s6-overlay/releases/download/v</span><span style="color:#f1fa8c">${</span><span style="color:#8be9fd;font-style:italic">S6_RELEASE</span><span style="color:#f1fa8c">}</span><span style="color:#f1fa8c">/s6-overlay-noarch.tar.xz&#34;</span> -o <span style="color:#f1fa8c">&#34;/tmp/s6-overlay-noarch.tar.xz&#34;</span> <span style="color:#f1fa8c">\
</span></span></span><span style="display:flex;"><span><span style="color:#f1fa8c"></span>    <span style="color:#ff79c6">&amp;&amp;</span> curl -sSL <span style="color:#f1fa8c">&#34;https://github.com/just-containers/s6-overlay/releases/download/v</span><span style="color:#f1fa8c">${</span><span style="color:#8be9fd;font-style:italic">S6_RELEASE</span><span style="color:#f1fa8c">}</span><span style="color:#f1fa8c">/s6-overlay-</span><span style="color:#f1fa8c">${</span><span style="color:#8be9fd;font-style:italic">S6_PLATFORM</span><span style="color:#f1fa8c">}</span><span style="color:#f1fa8c">.tar.xz&#34;</span> -o <span style="color:#f1fa8c">&#34;/tmp/s6-overlay-</span><span style="color:#f1fa8c">${</span><span style="color:#8be9fd;font-style:italic">S6_PLATFORM</span><span style="color:#f1fa8c">}</span><span style="color:#f1fa8c">.tar.xz&#34;</span> <span style="color:#f1fa8c">\
</span></span></span><span style="display:flex;"><span><span style="color:#f1fa8c"></span>    <span style="color:#ff79c6">&amp;&amp;</span> curl -sSL <span style="color:#f1fa8c">&#34;https://github.com/just-containers/s6-overlay/releases/download/v</span><span style="color:#f1fa8c">${</span><span style="color:#8be9fd;font-style:italic">S6_RELEASE</span><span style="color:#f1fa8c">}</span><span style="color:#f1fa8c">/s6-overlay-noarch.tar.xz.sha256&#34;</span> -o <span style="color:#f1fa8c">&#34;/tmp/s6-overlay-noarch.tar.xz.sha256&#34;</span> <span style="color:#f1fa8c">\
</span></span></span><span style="display:flex;"><span><span style="color:#f1fa8c"></span>    <span style="color:#ff79c6">&amp;&amp;</span> curl -sSL <span style="color:#f1fa8c">&#34;https://github.com/just-containers/s6-overlay/releases/download/v</span><span style="color:#f1fa8c">${</span><span style="color:#8be9fd;font-style:italic">S6_RELEASE</span><span style="color:#f1fa8c">}</span><span style="color:#f1fa8c">/s6-overlay-</span><span style="color:#f1fa8c">${</span><span style="color:#8be9fd;font-style:italic">S6_PLATFORM</span><span style="color:#f1fa8c">}</span><span style="color:#f1fa8c">.tar.xz.sha256&#34;</span> -o <span style="color:#f1fa8c">&#34;/tmp/s6-overlay-</span><span style="color:#f1fa8c">${</span><span style="color:#8be9fd;font-style:italic">S6_PLATFORM</span><span style="color:#f1fa8c">}</span><span style="color:#f1fa8c">.tar.xz.sha256&#34;</span> <span style="color:#f1fa8c">\
</span></span></span><span style="display:flex;"><span><span style="color:#f1fa8c"></span>    <span style="color:#ff79c6">&amp;&amp;</span> <span style="color:#8be9fd;font-style:italic">cd</span> /tmp <span style="color:#f1fa8c">\
</span></span></span><span style="display:flex;"><span><span style="color:#f1fa8c"></span>    <span style="color:#ff79c6">&amp;&amp;</span> sha256sum -c s6-overlay-noarch.tar.xz.sha256 <span style="color:#f1fa8c">\
</span></span></span><span style="display:flex;"><span><span style="color:#f1fa8c"></span>    <span style="color:#ff79c6">&amp;&amp;</span> sha256sum -c s6-overlay-<span style="color:#f1fa8c">${</span><span style="color:#8be9fd;font-style:italic">S6_PLATFORM</span><span style="color:#f1fa8c">}</span>.tar.xz.sha256 <span style="color:#f1fa8c">\
</span></span></span><span style="display:flex;"><span><span style="color:#f1fa8c"></span>    <span style="color:#ff79c6">&amp;&amp;</span> mkdir -p /s6/root <span style="color:#f1fa8c">\
</span></span></span><span style="display:flex;"><span><span style="color:#f1fa8c"></span>    <span style="color:#ff79c6">&amp;&amp;</span> tar -C /s6/root -Jxpf /tmp/s6-overlay-noarch.tar.xz <span style="color:#f1fa8c">\
</span></span></span><span style="display:flex;"><span><span style="color:#f1fa8c"></span>    <span style="color:#ff79c6">&amp;&amp;</span> tar -C /s6/root -Jxpf /tmp/s6-overlay-<span style="color:#f1fa8c">${</span><span style="color:#8be9fd;font-style:italic">S6_PLATFORM</span><span style="color:#f1fa8c">}</span>.tar.xz
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">FROM</span><span style="color:#f1fa8c"> scratch</span>
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">COPY</span> --from<span style="color:#ff79c6">=</span>s6 /s6/root /s6/root
</span></span></code></pre></div><p>It</p>
<ul>
<li>downloads for the specified architecture</li>
<li>asserts the checksum!</li>
<li>uses a fresh layer to copy everything</li>
</ul>
<p>This can be built with:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>docker build --no-cache --build-arg <span style="color:#8be9fd;font-style:italic">S6_RELEASE</span><span style="color:#ff79c6">=</span>3.2.0.0 -t hakindazz/s6-overlay-base:3.2.0.0 .
</span></span></code></pre></div><p>Or you can pull the image to check it out:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>docker pull hakindazz/s6-overlay-base:3.2.0.0
</span></span></code></pre></div><h2 id="include-via-docker-from">Include via docker <code>FROM</code></h2>
<p>The best part: You can now include the versioned sources via docker <code>--from</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-Dockerfile" data-lang="Dockerfile"><span style="display:flex;"><span><span style="color:#ff79c6">FROM</span><span style="color:#f1fa8c"> hakindazz/s6-overlay-base AS s6-overlay</span>
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">FROM</span><span style="color:#f1fa8c"> alpine3</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">COPY</span> --from<span style="color:#ff79c6">=</span>s6-overlay /s6/root /
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">ENTRYPOINT</span> [<span style="color:#f1fa8c">&#34;/init&#34;</span>]
</span></span></code></pre></div><h2 id="happy-image-building">Happy image building!!!</h2>
<h3 id="some-sources">Some sources:</h3>
<ul>
<li><a href="https://github.com/just-containers/s6-overlay">https://github.com/just-containers/s6-overlay</a></li>
<li><a href="https://github.com/dazz/s6-overlay-base">https://github.com/dazz/s6-overlay-base</a></li>
<li><a href="https://hub.docker.com/r/hakindazz/s6-overlay-base">https://hub.docker.com/r/hakindazz/s6-overlay-base</a></li>
<li><a href="https://github.com/dependabot">https://github.com/dependabot</a></li>
<li><a href="https://docs.renovatebot.com/modules/datasource/github-releases/">https://docs.renovatebot.com/modules/datasource/github-releases/</a></li>
</ul>
]]></description><media:thumbnail url="https://blog.dazzlog.de/s6-overlay.webp"/></item><item><title>Dynamic Route loading in a non standard Symfony structure</title><link>https://blog.dazzlog.de/posts/2024-08-16_dynamic-route-loading-symfony/</link><pubDate>Fri, 16 Aug 2024 23:42:23 +0100</pubDate><guid>https://blog.dazzlog.de/posts/2024-08-16_dynamic-route-loading-symfony/</guid><description><![CDATA[<p>When you divert from Symfony&rsquo;s standard structure there are some things that do not work out of the box anymore. One of it is routing.</p>
<h2 id="default-symfony">Default Symfony</h2>
<p>If you start a fresh Symfony project you will be presented with the following stricture:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>app/src  
</span></span><span style="display:flex;"><span>├─ Controller
</span></span><span style="display:flex;"><span>├─ Entity
</span></span><span style="display:flex;"><span>├─ Repository
</span></span><span style="display:flex;"><span>└─ Kernel.php
</span></span></code></pre></div><p>The routing config looks like this:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#6272a4"># app/config/routes.yaml</span>
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">controllers</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#ff79c6">resource</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#ff79c6">path</span>: ../src/Controller/
</span></span><span style="display:flex;"><span>        <span style="color:#ff79c6">namespace</span>: App\Controller
</span></span><span style="display:flex;"><span>    <span style="color:#ff79c6">type</span>: attribute
</span></span></code></pre></div><p>So the <code>Controller</code> directory is the place all controllers go you might think first. But When the project gets bigger a different structure might make more sense.</p>
<h2 id="the-dddclean-architecture-approach">The DDD/Clean Architecture approach</h2>
<p>If we use a DDD/Clean Architecture approach the structure might look like this:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>app/src
</span></span><span style="display:flex;"><span>├─ Blog 
</span></span><span style="display:flex;"><span>│ ├─ Application
</span></span><span style="display:flex;"><span>│ │ └─ CreateArticleController.php
</span></span><span style="display:flex;"><span>│ ├─ Domain
</span></span><span style="display:flex;"><span>│ │ └─ Article.php
</span></span><span style="display:flex;"><span>│ └─ Infrastructure
</span></span><span style="display:flex;"><span>├─ Registration
</span></span><span style="display:flex;"><span>│ ├─ Application
</span></span><span style="display:flex;"><span>│ │ ├─ CreateAccountController.php
</span></span><span style="display:flex;"><span>│ │ ├─ CreateAccountRequest.php
</span></span><span style="display:flex;"><span>│ │ └─ CreateAccountResponse.php
</span></span><span style="display:flex;"><span>│ ├─ Domain
</span></span><span style="display:flex;"><span>│ │ └─ Account.php
</span></span><span style="display:flex;"><span>│ └─ Infrastructure
</span></span><span style="display:flex;"><span>└─ Kernel.php
</span></span></code></pre></div><p>But now every Controller needs to be added to the routing config since the loading expects all controllers in one place.</p>
<div class="details admonition tip open">
  <div class="details-summary admonition-title">
    <i class="icon ">&#xf400;</i> tip<i class="details-icon fas fa-angle-right fa-fw"></i>
  </div>
  <div class="details-content">
    <div class="admonition-content">Configs should be kept clean and small</div>
  </div>
</div>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#6272a4"># app/config/routes.yaml</span>
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">app_registration_createaccount</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#6272a4"># loads routes from the PHP attributes of the given class</span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff79c6">resource</span>: App\Registration\CreateAccountController
</span></span><span style="display:flex;"><span>    <span style="color:#ff79c6">type</span>:     attribute
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">app_blog_createarticle</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#6272a4"># loads routes from the PHP attributes of the given class</span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff79c6">resource</span>: App\Blog\CreateArticleController
</span></span><span style="display:flex;"><span>    <span style="color:#ff79c6">type</span>:     attribute
</span></span></code></pre></div><p>This is not the comfortable way, since we were starting to embrace the <code>Route</code> attribute because it means we do not need to add each route to the routing config in a growing file and developers must not forget to add or update each route which might get annoying during refactoring.</p>
<h2 id="loading-routes-dynamic">Loading Routes dynamic</h2>
<p>In Symfony there is a simple way we can solve this: <a href="https://symfony.com/doc/current/routing/custom_route_loader.html">We can create our own loader with a custom service</a>.</p>
<h2 id="the-implementation">The implementation</h2>
<div class="details admonition symfony open">
  <div class="details-summary admonition-title">
    <i class="icon ">&#xe756;</i> From the Symfony Documentation<i class="details-icon fas fa-angle-right fa-fw"></i>
  </div>
  <div class="details-content">
    <div class="admonition-content"><blockquote>
<p>When the main loader parses this, it tries all registered delegate loaders.</p>
</blockquote>
<blockquote>
<p>If you&rsquo;re using <a href="https://symfony.com/doc/current/service_container.html#services-autoconfigure">autoconfigure</a>, your class should implement the <a href="https://github.com/symfony/symfony/blob/7.1/src/Symfony/Bundle/FrameworkBundle/Routing/RouteLoaderInterface.php" title="Symfony\Bundle\FrameworkBundle\Routing\RouteLoaderInterface">RouteLoaderInterface</a> interface to be tagged automatically.</p>
</blockquote>
<blockquote>
<p>If your service is invokable, you don&rsquo;t need to specify the method to use.</p>
</blockquote>
<blockquote>
<p>Your service doesn&rsquo;t have to extend or implement any special class, but the called method must return a <a href="https://github.com/symfony/symfony/blob/7.1/src/Symfony/Component/Routing/RouteCollection.php" title="Symfony\Component\Routing\RouteCollection">RouteCollection</a> object.</p>
</blockquote>
</div>
  </div>
</div>
<p>All good points</p>
<ul>
<li>We create an invokable service class</li>
<li>Implement the <code>RouteLoaderInterface</code></li>
<li>Let it return a <code>RouteCollection</code></li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>app/src
</span></span><span style="display:flex;"><span>├─ Blog
</span></span><span style="display:flex;"><span>│ └─ Application
</span></span><span style="display:flex;"><span>│   └─ CreateArticleController.php
</span></span><span style="display:flex;"><span>├─ Registration
</span></span><span style="display:flex;"><span>│ └─ Application
</span></span><span style="display:flex;"><span>│   └─ CreateAccountController.php
</span></span><span style="display:flex;"><span>├─ Shared
</span></span><span style="display:flex;"><span>│ └─ Application
</span></span><span style="display:flex;"><span>│   └─ Routing
</span></span><span style="display:flex;"><span>│     └─ RouteLoader.php &lt;<span style="color:#ff79c6">===</span> here
</span></span><span style="display:flex;"><span>└─ Kernel.php
</span></span></code></pre></div><p>The Loader class:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-php" data-lang="php"><span style="display:flex;"><span><span style="color:#ff79c6">&lt;?</span>php  
</span></span><span style="display:flex;"><span>  
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">declare</span>(strict_types<span style="color:#ff79c6">=</span><span style="color:#bd93f9">1</span>);  
</span></span><span style="display:flex;"><span>  
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">namespace</span> App\Shared\Application\Routing;  
</span></span><span style="display:flex;"><span>  
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">use</span> ReflectionClass;  
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">use</span> Symfony\Bundle\FrameworkBundle\Routing\RouteLoaderInterface;  
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">use</span> Symfony\Component\Finder\Finder;  
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">use</span> Symfony\Component\Routing\Attribute\Route <span style="color:#ff79c6">as</span> RouteAttribute;  
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">use</span> Symfony\Component\Routing\Route;  
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">use</span> Symfony\Component\Routing\RouteCollection;  
</span></span><span style="display:flex;"><span>  
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">class</span> <span style="color:#50fa7b">RouteLoader</span> <span style="color:#ff79c6">implements</span> RouteLoaderInterface  
</span></span><span style="display:flex;"><span>{  
</span></span><span style="display:flex;"><span>    <span style="color:#ff79c6">private</span> bool <span style="color:#8be9fd;font-style:italic">$isLoaded</span> <span style="color:#ff79c6">=</span> <span style="color:#ff79c6">false</span>;  
</span></span><span style="display:flex;"><span>  
</span></span><span style="display:flex;"><span>    <span style="color:#ff79c6">public</span> <span style="color:#ff79c6">function</span> __construct(<span style="color:#ff79c6">private</span> readonly string <span style="color:#8be9fd;font-style:italic">$routeLoaderBaseDirectory</span>)  
</span></span><span style="display:flex;"><span>    {  
</span></span><span style="display:flex;"><span>    }  
</span></span><span style="display:flex;"><span> 
</span></span><span style="display:flex;"><span>    <span style="color:#ff79c6">public</span> <span style="color:#ff79c6">function</span> __invoke(mixed <span style="color:#8be9fd;font-style:italic">$resource</span>, string <span style="color:#8be9fd;font-style:italic">$type</span> <span style="color:#ff79c6">=</span> <span style="color:#ff79c6">null</span>)<span style="color:#ff79c6">:</span> RouteCollection  
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        <span style="color:#ff79c6">if</span> (<span style="color:#8be9fd;font-style:italic">$this</span><span style="color:#ff79c6">-&gt;</span><span style="color:#50fa7b">isLoaded</span>) {  
</span></span><span style="display:flex;"><span>            <span style="color:#ff79c6">throw</span> <span style="color:#ff79c6">new</span> \RuntimeException(<span style="color:#f1fa8c">&#39;Do not add this loader twice.&#39;</span>);
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#8be9fd;font-style:italic">$routeCollection</span> <span style="color:#ff79c6">=</span> <span style="color:#ff79c6">new</span> RouteCollection();  
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#8be9fd;font-style:italic">$finder</span> <span style="color:#ff79c6">=</span> self<span style="color:#ff79c6">::</span><span style="color:#50fa7b">fromDirectories</span>(
</span></span><span style="display:flex;"><span>            <span style="color:#8be9fd;font-style:italic">$this</span><span style="color:#ff79c6">-&gt;</span><span style="color:#50fa7b">routeLoaderBaseDirectory</span>,
</span></span><span style="display:flex;"><span>            <span style="color:#8be9fd;font-style:italic">$this</span><span style="color:#ff79c6">-&gt;</span><span style="color:#50fa7b">routeLoaderBaseDirectory</span> <span style="color:#ff79c6">.</span> <span style="color:#f1fa8c">&#39;/*/**&#39;</span>,
</span></span><span style="display:flex;"><span>        );
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#ff79c6">foreach</span> (<span style="color:#8be9fd;font-style:italic">$finder</span> <span style="color:#ff79c6">as</span> <span style="color:#8be9fd;font-style:italic">$file</span>) {
</span></span><span style="display:flex;"><span>            <span style="color:#8be9fd;font-style:italic">$className</span> <span style="color:#ff79c6">=</span> <span style="color:#8be9fd;font-style:italic">$this</span><span style="color:#ff79c6">-&gt;</span><span style="color:#50fa7b">getClassNameFromFile</span>(<span style="color:#8be9fd;font-style:italic">$file</span><span style="color:#ff79c6">-&gt;</span><span style="color:#50fa7b">getRealPath</span>());
</span></span><span style="display:flex;"><span>            <span style="color:#8be9fd;font-style:italic">$namespace</span> <span style="color:#ff79c6">=</span> <span style="color:#8be9fd;font-style:italic">$this</span><span style="color:#ff79c6">-&gt;</span><span style="color:#50fa7b">getClassNamespaceFromFile</span>(<span style="color:#8be9fd;font-style:italic">$file</span><span style="color:#ff79c6">-&gt;</span><span style="color:#50fa7b">getRealPath</span>());
</span></span><span style="display:flex;"><span>            <span style="color:#ff79c6">if</span> (<span style="color:#ff79c6">!</span><span style="color:#8be9fd;font-style:italic">$className</span> <span style="color:#ff79c6">||</span> <span style="color:#ff79c6">!</span><span style="color:#8be9fd;font-style:italic">$namespace</span>) {
</span></span><span style="display:flex;"><span>                <span style="color:#ff79c6">continue</span>;
</span></span><span style="display:flex;"><span>            }
</span></span><span style="display:flex;"><span>            <span style="color:#8be9fd;font-style:italic">$fullQualifiedClassName</span> <span style="color:#ff79c6">=</span> <span style="color:#8be9fd;font-style:italic">$namespace</span> <span style="color:#ff79c6">.</span> <span style="color:#f1fa8c">&#39;\\&#39;</span> <span style="color:#ff79c6">.</span> <span style="color:#8be9fd;font-style:italic">$className</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>            <span style="color:#6272a4">// Use reflection to check for Symfony Route attributes
</span></span></span><span style="display:flex;"><span><span style="color:#6272a4"></span>            <span style="color:#8be9fd;font-style:italic">$reflectionClass</span> <span style="color:#ff79c6">=</span> <span style="color:#ff79c6">new</span> ReflectionClass(<span style="color:#8be9fd;font-style:italic">$fullQualifiedClassName</span>);
</span></span><span style="display:flex;"><span>            <span style="color:#8be9fd;font-style:italic">$attributes</span> <span style="color:#ff79c6">=</span> <span style="color:#8be9fd;font-style:italic">$this</span><span style="color:#ff79c6">-&gt;</span><span style="color:#50fa7b">getRouteAttributes</span>(<span style="color:#8be9fd;font-style:italic">$reflectionClass</span>);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>            <span style="color:#6272a4">// Handle class-level attributes for invokable controller classes
</span></span></span><span style="display:flex;"><span><span style="color:#6272a4"></span>            <span style="color:#ff79c6">if</span> (<span style="color:#8be9fd;font-style:italic">$reflectionClass</span><span style="color:#ff79c6">-&gt;</span><span style="color:#50fa7b">hasMethod</span>(<span style="color:#f1fa8c">&#39;__invoke&#39;</span>)) {
</span></span><span style="display:flex;"><span>                <span style="color:#ff79c6">foreach</span> (<span style="color:#8be9fd;font-style:italic">$attributes</span> <span style="color:#ff79c6">as</span> <span style="color:#8be9fd;font-style:italic">$routeAttribute</span>) {
</span></span><span style="display:flex;"><span>                    <span style="color:#8be9fd;font-style:italic">$route</span> <span style="color:#ff79c6">=</span> <span style="color:#8be9fd;font-style:italic">$this</span><span style="color:#ff79c6">-&gt;</span><span style="color:#50fa7b">createRouteFromAttribute</span>(<span style="color:#8be9fd;font-style:italic">$routeAttribute</span>);
</span></span><span style="display:flex;"><span>                    <span style="color:#8be9fd;font-style:italic">$routeName</span> <span style="color:#ff79c6">=</span> <span style="color:#8be9fd;font-style:italic">$routeAttribute</span><span style="color:#ff79c6">-&gt;</span><span style="color:#50fa7b">getName</span>() <span style="color:#ff79c6">??</span> <span style="color:#8be9fd;font-style:italic">$this</span><span style="color:#ff79c6">-&gt;</span><span style="color:#50fa7b">generateRouteName</span>(<span style="color:#8be9fd;font-style:italic">$fullQualifiedClassName</span>, <span style="color:#f1fa8c">&#39;__invoke&#39;</span>); 
</span></span><span style="display:flex;"><span>                    <span style="color:#8be9fd;font-style:italic">$routeCollection</span><span style="color:#ff79c6">-&gt;</span><span style="color:#50fa7b">add</span>(<span style="color:#8be9fd;font-style:italic">$routeName</span>, <span style="color:#8be9fd;font-style:italic">$route</span>);
</span></span><span style="display:flex;"><span>                }
</span></span><span style="display:flex;"><span>                <span style="color:#ff79c6">continue</span>; <span style="color:#6272a4">// there should only be a class declaration when invokable
</span></span></span><span style="display:flex;"><span><span style="color:#6272a4"></span>            }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>            <span style="color:#6272a4">// Handle method-level attributes
</span></span></span><span style="display:flex;"><span><span style="color:#6272a4"></span>            <span style="color:#ff79c6">foreach</span> (<span style="color:#8be9fd;font-style:italic">$reflectionClass</span><span style="color:#ff79c6">-&gt;</span><span style="color:#50fa7b">getMethods</span>() <span style="color:#ff79c6">as</span> <span style="color:#8be9fd;font-style:italic">$method</span>) {
</span></span><span style="display:flex;"><span>                <span style="color:#ff79c6">foreach</span> (<span style="color:#8be9fd;font-style:italic">$attributes</span> <span style="color:#ff79c6">as</span> <span style="color:#8be9fd;font-style:italic">$routeAttribute</span>) {
</span></span><span style="display:flex;"><span>                    <span style="color:#8be9fd;font-style:italic">$route</span> <span style="color:#ff79c6">=</span> <span style="color:#8be9fd;font-style:italic">$this</span><span style="color:#ff79c6">-&gt;</span><span style="color:#50fa7b">createRouteFromAttribute</span>(<span style="color:#8be9fd;font-style:italic">$routeAttribute</span>);
</span></span><span style="display:flex;"><span>                    <span style="color:#8be9fd;font-style:italic">$routeName</span> <span style="color:#ff79c6">=</span> <span style="color:#8be9fd;font-style:italic">$routeAttribute</span><span style="color:#ff79c6">-&gt;</span><span style="color:#50fa7b">getName</span>() <span style="color:#ff79c6">??</span> <span style="color:#8be9fd;font-style:italic">$this</span><span style="color:#ff79c6">-&gt;</span><span style="color:#50fa7b">generateRouteName</span>(<span style="color:#8be9fd;font-style:italic">$fullQualifiedClassName</span>, <span style="color:#8be9fd;font-style:italic">$method</span><span style="color:#ff79c6">-&gt;</span><span style="color:#50fa7b">getName</span>());
</span></span><span style="display:flex;"><span>                    <span style="color:#8be9fd;font-style:italic">$routeCollection</span><span style="color:#ff79c6">-&gt;</span><span style="color:#50fa7b">add</span>(<span style="color:#8be9fd;font-style:italic">$routeName</span>, <span style="color:#8be9fd;font-style:italic">$route</span>);
</span></span><span style="display:flex;"><span>                }
</span></span><span style="display:flex;"><span>            }
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#8be9fd;font-style:italic">$this</span><span style="color:#ff79c6">-&gt;</span><span style="color:#50fa7b">isLoaded</span> <span style="color:#ff79c6">=</span> <span style="color:#ff79c6">true</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#ff79c6">return</span> <span style="color:#8be9fd;font-style:italic">$routeCollection</span>;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#6272a4">// ...
</span></span></span><span style="display:flex;"><span><span style="color:#6272a4"></span>}
</span></span></code></pre></div><p>See full <a href="https://gist.github.com/dazz/151ed59887dc0299c4f462c33b701c94">gist.github.com/dazz of RouteLoader.php</a></p>
<p>Add the class in the routing config:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#6272a4"># app/config/routing.yaml</span>
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">controllers</span>:  
</span></span><span style="display:flex;"><span>    <span style="color:#ff79c6">resource</span>: App\Shared\Application\Routing\RouteLoader  
</span></span><span style="display:flex;"><span>    <span style="color:#ff79c6">type</span>: service
</span></span></code></pre></div><p>One thing still left to do is make the path with the <code>$routeLoaderBaseDirectory</code> in the service configuration autowirable.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#6272a4"># app/config/services.yaml</span>
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">parameters</span>:  
</span></span><span style="display:flex;"><span>  
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">services</span>:  
</span></span><span style="display:flex;"><span>    <span style="color:#ff79c6">_defaults</span>:  
</span></span><span style="display:flex;"><span>        <span style="color:#ff79c6">autowire</span>: <span style="color:#ff79c6">true</span>
</span></span><span style="display:flex;"><span>        <span style="color:#ff79c6">autoconfigure</span>: <span style="color:#ff79c6">true</span>
</span></span><span style="display:flex;"><span>        <span style="color:#ff79c6">bind</span>:
</span></span><span style="display:flex;"><span>            <span style="color:#ff79c6">string $routeLoaderBaseDirectory</span>: <span style="color:#f1fa8c">&#39;%kernel.project_dir%/src&#39;</span>
</span></span></code></pre></div><h2 id="controller">Controller</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-php" data-lang="php"><span style="display:flex;"><span><span style="color:#ff79c6">namespace</span> App\Registration\Application;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">use</span> Symfony\Component\HttpFoundation\Request;
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">use</span> Symfony\Component\HttpKernel\Attribute\AsController;
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">use</span> Symfony\Component\Routing\Attribute\Route;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#6272a4">#[AsController] # to make it autowirable
</span></span></span><span style="display:flex;"><span><span style="color:#6272a4">#[Route(
</span></span></span><span style="display:flex;"><span><span style="color:#6272a4"></span>    path<span style="color:#ff79c6">:</span> <span style="color:#f1fa8c">&#39;/registration/createaccount&#39;</span>,
</span></span><span style="display:flex;"><span>    name<span style="color:#ff79c6">:</span> <span style="color:#f1fa8c">&#39;app_registration_createaccount&#39;</span>,
</span></span><span style="display:flex;"><span>    methods<span style="color:#ff79c6">:</span> [Request<span style="color:#ff79c6">::</span><span style="color:#50fa7b">METHOD_POST</span>]
</span></span><span style="display:flex;"><span>)]
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">final</span> readonly <span style="color:#ff79c6">class</span> <span style="color:#50fa7b">CreateAccountController</span>
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    <span style="color:#ff79c6">public</span> <span style="color:#ff79c6">function</span> __invoke(CreateAccountRequest <span style="color:#8be9fd;font-style:italic">$request</span>)<span style="color:#ff79c6">:</span> CreateAccountResponse
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        <span style="color:#6272a4">// create account logic
</span></span></span><span style="display:flex;"><span><span style="color:#6272a4"></span>        <span style="color:#ff79c6">return</span> <span style="color:#ff79c6">new</span> CreateAccountResponse();
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><h2 id="binconsole-debugrouter"><code>bin/console debug:router</code></h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>&gt; bin/console debug:router
</span></span><span style="display:flex;"><span> -------------------------------- -------- -------- ------ ----------------------------- 
</span></span><span style="display:flex;"><span>  Name                             Method   Scheme   Host   Path                         
</span></span><span style="display:flex;"><span> -------------------------------- -------- -------- ------ ----------------------------- 
</span></span><span style="display:flex;"><span>  app_blog_createarticle           POST     ANY      ANY    /blog/article  
</span></span><span style="display:flex;"><span>  app_registration_createaccount   POST     ANY      ANY    /registration/account
</span></span><span style="display:flex;"><span> -------------------------------- -------- -------- ------ -----------------------------
</span></span></code></pre></div><h2 id="happy-loading-routes-everyone">Happy loading routes everyone!</h2>
<h4 id="more-sources">More sources</h4>
<ul>
<li><a href="https://gist.github.com/dazz/151ed59887dc0299c4f462c33b701c94">gist.github.com/dazz RouteLoader.php</a></li>
<li><a href="https://tomasvotruba.com/blog/2-tricks-to-get-your-symfony-configs-lines-to-minimum">tomasvotruba.com - 2 Tricks to get your Symfony configs lines to minimum</a></li>
</ul>
]]></description><media:thumbnail url="https://blog.dazzlog.de/loading-route-in-a-symphonical-way.webp"/></item><item><title>Environment variables in a dockerized Symfony</title><link>https://blog.dazzlog.de/posts/2023-01-02_environment-variables-in-a-dockerized-symfony/</link><pubDate>Mon, 02 Jan 2023 19:24:18 +0100</pubDate><guid>https://blog.dazzlog.de/posts/2023-01-02_environment-variables-in-a-dockerized-symfony/</guid><description><![CDATA[<p>I have developed a <strong>Symfony Web-Application</strong>, and it runs locally in a dockerized environment with docker-compose. This app is going to be deployed to production as a docker container.
In production the handling of environment variables and how they are passed to the container during development is different.</p>
<h2 id="12-factor-app">12 Factor App</h2>
<p>A few points from the <a href="https://12factor.net">12factor methodology</a>:</p>
<ul>
<li><a href="https://12factor.net/config">III. Config</a>: Store config in the environment since env vars are easy to change between deploys without changing any code</li>
<li><a href="https://12factor.net/dev-prod-parity">X. Dev/prod parity</a>: Keep development, staging, and production as similar as possible</li>
</ul>
<p>I was searching for options how to handle the differences how environment variables are passed and I found there are at least</p>
<h2 id="7-ways-to-pass-environment-variables-to-a-container">7 ways to pass environment variables to a container</h2>
<ol>
<li><code>ENV</code> in dockerfile</li>
<li>Dockerfile args passed at build time to <code>ENV</code></li>
<li>ENV passing in docker run as option</li>
<li>Env_file in docker run as option</li>
<li>Environment variables in <code>docker-compose.yml</code></li>
<li>Env_file in docker compose for each service</li>
<li><code>.env</code> in docker compose substitutes variables in <code>docker-compose.yml</code></li>
</ol>
<p>And there is even more. If variables are passed to a container there is an order of precedence as follows:</p>
<div class="details admonition tip open">
  <div class="details-summary admonition-title">
    <i class="icon ">&#xf400;</i> Order of Precedence<i class="details-icon fas fa-angle-right fa-fw"></i>
  </div>
  <div class="details-content">
    <div class="admonition-content"><ol>
<li>Passed from the command line <a href="https://docs.docker.com/compose/envvars-precedence/../../engine/reference/commandline/compose_run#options"><code>docker compose run --env &lt;KEY[=[VAL]]&gt;</code></a>.</li>
<li>Passed from/set in <code>compose.yaml</code> service’s configuration, from the <a href="https://docs.docker.com/compose/envvars-precedence/../../compose/compose-file#environment">environment key</a>.</li>
<li>Passed from/set in <code>compose.yaml</code> service’s configuration, from the <a href="https://docs.docker.com/compose/envvars-precedence/../../compose/compose-file#env_file">env_file key</a>.</li>
<li>Passed from/set in Container Image in the <a href="https://docs.docker.com/engine/reference/builder#env">ENV directive</a>.</li>
</ol>
<p>from <a href="https://docs.docker.com/compose/envvars-precedence/">https://docs.docker.com/compose/envvars-precedence/</a></p></div>
  </div>
</div>
<h1 id="how-to-deal-with-environment-variables-in-a-dockerized-symfony">How to deal with environment variables in a dockerized Symfony</h1>
<h2 id="the-goal">The goal</h2>
<p>All services regardless of which technology they use, should have one streamlined way of how the environment variables should be passed to the application.</p>
<h2 id="the-big-picture">The big picture</h2>
<ul>
<li>We use multiple services which all need to work together</li>
<li>Services run in docker container</li>
<li>We deploy and run services in different compositions for each environment</li>
<li>Each service has their own sensitive data</li>
<li>Each service might be a different technology or has a different tech stack</li>
</ul>
<h2 id="steps-towards-the-goal">Steps towards the goal</h2>
<ul>
<li>The infrastructure config should be kept in env files but not in the same directory as the application</li>
<li>Each service gets its own env file to be completely independent of each other, and it gets explicitly set</li>
<li>During development each service gets the env variables passed via env file (<code>env_file</code> in docker-compose)</li>
<li>Every project that has a <code>docker-compose.yml</code> moves the application into an <code>app</code> directory to separate the application from its infrastructure configuration</li>
<li>We remove the DotEnv component from symfony and define each environment variable that we expect as parameter so the app tells us instantly when a key-value pair is missing</li>
<li>In development credentials can be added to the VCS</li>
<li>In all other envs the credentials can be either stored and linked on the server or be read from a vault</li>
</ul>
<h2 id="the-implementation">The implementation</h2>
<p>In Symfony the DotEnv component is default installed and enabled in the frontcontroller, so when a new app is created there is always a <code>.env</code> file at the project root created with it. <a href="https://symfony.com/doc/current/configuration.html#configuring-environment-variables-in-env-files">Read more in the documentation.</a></p>
<p>It is not the same <code>.env</code> that <code>docker-compose.yml</code> expects.
<div class="details admonition warning open">
  <div class="details-summary admonition-title">
    <i class="icon ">&#xf071;</i> Symfony DotEnv and Docker Compose use the same file name .env<i class="details-icon fas fa-angle-right fa-fw"></i>
  </div>
  <div class="details-content">
    <div class="admonition-content">Docker compose is also using a file named  <code>.env</code> to replace the variables in the <code>docker-compose.yml</code> if it is located in the same directory.
If you don&rsquo;t know that and put the web apps <code>.env</code> file in the same place then you accidentally might overwrite variables when you think you just updated a variable for the Symfony application.</div>
  </div>
</div></p>
<p>We have two different stacks here that both want to use the <code>.env</code> file and both might, but not at the same time, obviously.</p>
<p>Since we want to use config variables explicitly and not by accident the Symfony DotEnv component is going to be removed and all config is moved inside environment variable files that are passed into the container.</p>
<h3 id="the-directory-tree">The directory tree</h3>
<p>To ease the separation of infrastructure and code the application code moves into the <code>./app</code> directory to be completely separate from the code/config that defines the infrastructure.
You see there is no <code>.env</code> file left from Symfony. All variables have now moved to the env files inside the <code>devops/env</code> directory.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-gdscript3" data-lang="gdscript3"><span style="display:flex;"><span><span style="color:#ff79c6">.</span>
</span></span><span style="display:flex;"><span>├── app
</span></span><span style="display:flex;"><span>│   ├── assets
</span></span><span style="display:flex;"><span>│   ├── bin
</span></span><span style="display:flex;"><span>│   ├── ci
</span></span><span style="display:flex;"><span>│   ├── config
</span></span><span style="display:flex;"><span>│   ├── migrations
</span></span><span style="display:flex;"><span>│   ├── node_modules
</span></span><span style="display:flex;"><span>│   ├── public
</span></span><span style="display:flex;"><span>│   │   └── index<span style="color:#ff79c6">.</span>php
</span></span><span style="display:flex;"><span>│   ├── src
</span></span><span style="display:flex;"><span>│   ├── templates
</span></span><span style="display:flex;"><span>│   ├── tests
</span></span><span style="display:flex;"><span>│   ├── <span style="color:#ff79c6">var</span>
</span></span><span style="display:flex;"><span>│   ├── vendor
</span></span><span style="display:flex;"><span>│   ├── composer<span style="color:#ff79c6">.</span>json
</span></span><span style="display:flex;"><span>│   ├── composer<span style="color:#ff79c6">.</span>lock
</span></span><span style="display:flex;"><span>│   ├── Makefile
</span></span><span style="display:flex;"><span>│   ├── package<span style="color:#ff79c6">.</span>json
</span></span><span style="display:flex;"><span>│   ├── symfony<span style="color:#ff79c6">.</span>lock
</span></span><span style="display:flex;"><span>│   ├── webpack<span style="color:#ff79c6">.</span>config<span style="color:#ff79c6">.</span>js
</span></span><span style="display:flex;"><span>│   └── yarn<span style="color:#ff79c6">.</span>lock
</span></span><span style="display:flex;"><span>├── devops
</span></span><span style="display:flex;"><span>│   ├── database
</span></span><span style="display:flex;"><span>│   ├── docker
</span></span><span style="display:flex;"><span>│   │   └── frankenphp
</span></span><span style="display:flex;"><span>│   │        └── Dockerfile
</span></span><span style="display:flex;"><span>│   └── env
</span></span><span style="display:flex;"><span>│       ├── app<span style="color:#ff79c6">.</span>env
</span></span><span style="display:flex;"><span>│       └── database<span style="color:#ff79c6">.</span>env
</span></span><span style="display:flex;"><span>├── CONTRIBUTING<span style="color:#ff79c6">.</span>md
</span></span><span style="display:flex;"><span>├── docker<span style="color:#ff79c6">-</span>compose<span style="color:#ff79c6">.</span>prod<span style="color:#ff79c6">.</span>yml
</span></span><span style="display:flex;"><span>├── docker<span style="color:#ff79c6">-</span>compose<span style="color:#ff79c6">.</span>yml
</span></span><span style="display:flex;"><span>├── Makefile
</span></span><span style="display:flex;"><span>└── README<span style="color:#ff79c6">.</span>md
</span></span></code></pre></div><h2 id="the-docker-composeyml">The docker-compose.yml</h2>
<p>Each service gets its own <code>env_file</code> where we can configure the sensitive data for each service.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#ff79c6">version</span>: <span style="color:#f1fa8c">&#39;3.9&#39;</span>  
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">services</span>:  
</span></span><span style="display:flex;"><span>  <span style="color:#ff79c6">app</span>:  
</span></span><span style="display:flex;"><span>    <span style="color:#ff79c6">image</span>: ghcr.io/c-base/cbag3:dev-latest  
</span></span><span style="display:flex;"><span>    <span style="color:#ff79c6">build</span>:  
</span></span><span style="display:flex;"><span>      <span style="color:#ff79c6">dockerfile</span>: ./devops/docker/frankenphp/Dockerfile  
</span></span><span style="display:flex;"><span>      <span style="color:#ff79c6">target</span>: dev  
</span></span><span style="display:flex;"><span>    <span style="color:#ff79c6">env_file</span>: ./devops/env/app.env  
</span></span><span style="display:flex;"><span>    <span style="color:#ff79c6">ports</span>:  
</span></span><span style="display:flex;"><span>      - <span style="color:#bd93f9">80</span>:<span style="color:#bd93f9">80</span>  
</span></span><span style="display:flex;"><span>      - <span style="color:#bd93f9">443</span>:<span style="color:#bd93f9">443</span>  
</span></span><span style="display:flex;"><span>    <span style="color:#ff79c6">volumes</span>:  
</span></span><span style="display:flex;"><span>      - <span style="color:#f1fa8c">&#39;./app:/app&#39;</span>  
</span></span><span style="display:flex;"><span>  
</span></span><span style="display:flex;"><span>  <span style="color:#ff79c6">database</span>:  
</span></span><span style="display:flex;"><span>    <span style="color:#ff79c6">image</span>: postgres:alpine  
</span></span><span style="display:flex;"><span>    <span style="color:#ff79c6">container_name</span>: database  
</span></span><span style="display:flex;"><span>    <span style="color:#ff79c6">env_file</span>: ./devops/env/database.env  
</span></span><span style="display:flex;"><span>    <span style="color:#ff79c6">ports</span>:  
</span></span><span style="display:flex;"><span>      - <span style="color:#bd93f9">15432</span>:<span style="color:#bd93f9">5432</span>  
</span></span><span style="display:flex;"><span>    <span style="color:#ff79c6">volumes</span>:  
</span></span><span style="display:flex;"><span>      - ./devops/database:/var/lib/postgresql
</span></span></code></pre></div><div class="details admonition tip open">
  <div class="details-summary admonition-title">
    <i class="icon ">&#xf400;</i> tip<i class="details-icon fas fa-angle-right fa-fw"></i>
  </div>
  <div class="details-content">
    <div class="admonition-content">the <code>.env</code> file can be used with docker compose to configure variables inside the <code>docker-compose.yml</code></div>
  </div>
</div>
<h2 id="disable-dotenv-in-frontcontroller--and-console">Disable DotEnv in frontcontroller  and console</h2>
<p>The DotEnv component is disabled since all environment variables have already passed to the container.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-php" data-lang="php"><span style="display:flex;"><span><span style="color:#6272a4"># app/public/index.php
</span></span></span><span style="display:flex;"><span><span style="color:#6272a4"></span><span style="color:#ff79c6">&lt;?</span>php  
</span></span><span style="display:flex;"><span>  
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">use</span> Cbase\App\Kernel;  
</span></span><span style="display:flex;"><span>  
</span></span><span style="display:flex;"><span><span style="color:#8be9fd;font-style:italic">$_SERVER</span>[<span style="color:#f1fa8c">&#39;APP_RUNTIME_OPTIONS&#39;</span>][<span style="color:#f1fa8c">&#39;disable_dotenv&#39;</span>] <span style="color:#ff79c6">=</span> <span style="color:#ff79c6">true</span>; 
</span></span><span style="display:flex;"><span>  
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">require_once</span> dirname(__DIR__)<span style="color:#ff79c6">.</span><span style="color:#f1fa8c">&#39;/vendor/autoload_runtime.php&#39;</span>;  
</span></span><span style="display:flex;"><span>  
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">return</span> <span style="color:#ff79c6">function</span> (<span style="color:#ff79c6">array</span> <span style="color:#8be9fd;font-style:italic">$context</span>) {  
</span></span><span style="display:flex;"><span>    <span style="color:#ff79c6">return</span> <span style="color:#ff79c6">new</span> Kernel(<span style="color:#8be9fd;font-style:italic">$context</span>[<span style="color:#f1fa8c">&#39;APP_ENV&#39;</span>], (bool) <span style="color:#8be9fd;font-style:italic">$context</span>[<span style="color:#f1fa8c">&#39;APP_DEBUG&#39;</span>]);  
</span></span><span style="display:flex;"><span>};
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-php" data-lang="php"><span style="display:flex;"><span><span style="color:#6272a4"># app/bin/console
</span></span></span><span style="display:flex;"><span><span style="color:#6272a4">#!/usr/bin/env php  
</span></span></span><span style="display:flex;"><span><span style="color:#6272a4"></span><span style="color:#ff79c6">&lt;?</span>php  
</span></span><span style="display:flex;"><span>  
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">use</span> Cbase\App\Kernel;  
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">use</span> Symfony\Bundle\FrameworkBundle\Console\Application;  
</span></span><span style="display:flex;"><span>  
</span></span><span style="display:flex;"><span><span style="color:#8be9fd;font-style:italic">$_SERVER</span>[<span style="color:#f1fa8c">&#39;APP_RUNTIME_OPTIONS&#39;</span>][<span style="color:#f1fa8c">&#39;disable_dotenv&#39;</span>] <span style="color:#ff79c6">=</span> <span style="color:#ff79c6">true</span>;  
</span></span><span style="display:flex;"><span>  
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">require_once</span> dirname(__DIR__) <span style="color:#ff79c6">.</span> <span style="color:#f1fa8c">&#39;/vendor/autoload_runtime.php&#39;</span>;  
</span></span><span style="display:flex;"><span>  
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">return</span> <span style="color:#ff79c6">function</span> (<span style="color:#ff79c6">array</span> <span style="color:#8be9fd;font-style:italic">$context</span>) {  
</span></span><span style="display:flex;"><span>    <span style="color:#8be9fd;font-style:italic">$kernel</span> <span style="color:#ff79c6">=</span> <span style="color:#ff79c6">new</span> Kernel(<span style="color:#8be9fd;font-style:italic">$context</span>[<span style="color:#f1fa8c">&#39;APP_ENV&#39;</span>], (bool) <span style="color:#8be9fd;font-style:italic">$context</span>[<span style="color:#f1fa8c">&#39;APP_DEBUG&#39;</span>]);  
</span></span><span style="display:flex;"><span>  
</span></span><span style="display:flex;"><span>    <span style="color:#ff79c6">return</span> <span style="color:#ff79c6">new</span> Application(<span style="color:#8be9fd;font-style:italic">$kernel</span>);  
</span></span><span style="display:flex;"><span>};
</span></span></code></pre></div><div class="details admonition symfony open">
  <div class="details-summary admonition-title">
    <i class="icon ">&#xe756;</i> Symfony Runtime<i class="details-icon fas fa-angle-right fa-fw"></i>
  </div>
  <div class="details-content">
    <div class="admonition-content">See described here: <a href="https://symfony.com/doc/current/components/runtime.html#using-options">Configure Symfony Runtime Using Options</a></div>
  </div>
</div>
<div class="details admonition note open">
  <div class="details-summary admonition-title">
    <i class="icon ">&#Xf040;</i> run app only inside container<i class="details-icon fas fa-angle-right fa-fw"></i>
  </div>
  <div class="details-content">
    <div class="admonition-content">By disabling DotEnv we will no longer be able to run the application outside the container (our local machine) unless we set all environment variables there as well.</div>
  </div>
</div>
<div class="details admonition note open">
  <div class="details-summary admonition-title">
    <i class="icon ">&#Xf040;</i> keep DotEnv for tests<i class="details-icon fas fa-angle-right fa-fw"></i>
  </div>
  <div class="details-content">
    <div class="admonition-content">For now, we leave the DotEnv for the tests since those environment variables won&rsquo;t change regardless of where they are executed, and they will be executed in the dev container. We could change that by running the tests in their own container, but for now keep the <code>.env.test</code>.</div>
  </div>
</div>
<h2 id="dont-forget-to-add-the-parameters-in-servicesyml">Don&rsquo;t forget to add the parameters in <code>services.yml</code></h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#6272a4"># app/config/services.yaml</span>
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">parameters</span>:  
</span></span><span style="display:flex;"><span>  <span style="color:#ff79c6">images.upload.directory</span>: <span style="color:#f1fa8c">&#39;%env(resolve:IMAGES_UPLOAD_DIRECTORY)%&#39;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">services</span>:  
</span></span><span style="display:flex;"><span>  <span style="color:#ff79c6">_defaults</span>:  
</span></span><span style="display:flex;"><span>    <span style="color:#ff79c6">autowire</span>: <span style="color:#ff79c6">true</span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff79c6">autoconfigure</span>: <span style="color:#ff79c6">true</span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff79c6">bind</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#ff79c6">string $imagesUploadDirectory</span>: <span style="color:#f1fa8c">&#39;%images.upload.directory%&#39;</span>
</span></span></code></pre></div><p>Since every environment has its own env_file there is the danger of forgetting to add an environment variable to the other environments.</p>
<div class="details admonition tip open">
  <div class="details-summary admonition-title">
    <i class="icon ">&#xf400;</i> tip<i class="details-icon fas fa-angle-right fa-fw"></i>
  </div>
  <div class="details-content">
    <div class="admonition-content">In order to fail early we load the environment variable at the start of the application, by binding it.
If we do not bind parameters to variables but just bin them to a service we might miss that we forgot to set an
environment variable in the env file since the service might not be loaded in every request.</div>
  </div>
</div>
<h2 id="run-docker--container-in-production-with-env-file">Run docker  container in production with env-file</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>cat devops/env/app.env
</span></span><span style="display:flex;"><span><span style="color:#6272a4"># This is a comment</span>
</span></span><span style="display:flex;"><span><span style="color:#8be9fd;font-style:italic">IMAGES_UPLOAD_DIRECTORY</span><span style="color:#ff79c6">=</span><span style="color:#f1fa8c">&#34;%kernel.project_dir%/var/uploads&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>docker run --env-file devops/env/app.env app env | grep -E <span style="color:#f1fa8c">&#39;IMAGES&#39;</span>
</span></span><span style="display:flex;"><span><span style="color:#8be9fd;font-style:italic">IMAGES_UPLOAD_DIRECTORY</span><span style="color:#ff79c6">=</span><span style="color:#f1fa8c">&#34;%kernel.project_dir%/var/uploads&#34;</span>
</span></span></code></pre></div><p>Read more about it in the <a href="https://docs.docker.com/engine/reference/commandline/run/#-set-environment-variables--e---env---env-file">docker documentation</a>.</p>
<h2 id="migration-path">Migration Path</h2>
<p>There is a migration path for projects that use already many config yaml files and want to migrate to environment
variables.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#6272a4"># config/my-app.yaml</span>
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">parameters</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#ff79c6">images.upload.directory</span>: <span style="color:#f1fa8c">&#39;%kernel.project_dir%/var/uploads&#39;</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#6272a4"># config/services.yaml</span>
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">parameters</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#ff79c6">env(IMAGES_UPLOAD_DIRECTORY)</span>: <span style="color:#f1fa8c">&#39;%images.upload.directory%&#39;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">services</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#ff79c6">_defaults</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#ff79c6">bind</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#ff79c6">string $imagesUploadDirectory</span>: <span style="color:#f1fa8c">&#39;%env(resolve:IMAGES_UPLOAD_DIRECTORY)%&#39;</span>
</span></span></code></pre></div><ol>
<li>the configuration processor looks up if there is an environment variable <code>IMAGES_UPLOAD_DIRECTORY</code></li>
<li>if that is the case, it will be taken,</li>
<li>otherwise if it is not found <code>'%images.upload.directory%'</code> will be set to the environment variable.</li>
<li>the <code>'%env(resolve:IMAGES_UPLOAD_DIRECTORY)%'</code> is bound to a variable <code>$imagesUploadDirectory</code></li>
</ol>
<p>Read more about configuration processors in the <a href="https://symfony.com/doc/current/configuration/env_var_processors.html">Symfony documentation about &ldquo;Environment Variable Processors&rdquo;</a>.</p>
<p>This would result in the following migration path:</p>
<ol>
<li>Make it possible to set variables via environment variables</li>
<li>Make sure all environments set the corresponding variables</li>
<li>Remove many quirky unnecessary config files</li>
<li>win</li>
</ol>
<h2 id="conclusion">Conclusion</h2>
<p>We removed the DotEnv from Symfony and will miss out on all the functionality that came with it, but chose using the <code>env_file</code> as it can be used for running a container, and it can be configured in the <code>docker-compose.yml</code>.
The environment configs can be dumped from secret vaults regardless of the tech-stack that the cloud has to offer or kept in a shared directory that won&rsquo;t change between deployments.
There will be <strong>one</strong> explicit way of how each service will get configuration regardless of their environment or tech stack.
Also, we learned that there is a simple way in Symfony to migrate to environment variables.</p>
<h2 id="happy-continuously-deploying-everyone">Happy continuously deploying everyone</h2>
<h4 id="more-sources">More sources</h4>
<ul>
<li><a href="https://rotempinchevskiboguslavsky.medium.com/environment-variables-in-container-vs-docker-compose-file-2426b2ec7d8b">Environment Variables in Container vs. Docker Compose File</a></li>
</ul>
]]></description><media:thumbnail url="https://blog.dazzlog.de/amy-humphries-2M_sDJ_agvs-unsplash.jpg"/></item><item><title>Build and push docker images to ghcr.io with GitHub Actions</title><link>https://blog.dazzlog.de/posts/2022-12-28_build-and-push-docker-images-to-ghcr-with-github-actions/</link><pubDate>Wed, 28 Dec 2022 00:25:38 +0100</pubDate><guid>https://blog.dazzlog.de/posts/2022-12-28_build-and-push-docker-images-to-ghcr-with-github-actions/</guid><description><![CDATA[<p>When you host your project code on GitHub and want to release it as a docker image for deployment or just publish it, the way to go are GitHub actions. Actions are basically hooks that can start CI/DC workflows on repository events.</p>
<p>GitHub actions can be used to build and push images to GitHub’s Container Registry which are reachable under <a href="https://ghcr.io">https://ghcr.io</a> which is part of the package registry. The package registry is not only for docker images, it can also host quite a few other kinds of packages. In this case we’ll focus on docker images.</p>
<h2 id="prerequisites"><strong>Prerequisites</strong>:</h2>
<ul>
<li>GitHub Repository</li>
<li>Basic Knowledge about GitHub actions syntax</li>
<li>Dockerfile</li>
</ul>
<h2 id="the-github-workflow">The GitHub Workflow</h2>
<p>I created a workflow in my repository under <code>.github/workflow/cd.md</code> and added the following:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#ff79c6">name</span>: Continuous Delivery
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">on</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#ff79c6">push</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#ff79c6">branches</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#f1fa8c">&#39;main&#39;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff79c6">tags</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#f1fa8c">&#39;v*.*.*&#39;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">jobs</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#ff79c6">build</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#ff79c6">name</span>: Buid and push Docker image to GitHub Container registry
</span></span><span style="display:flex;"><span>    <span style="color:#ff79c6">runs-on</span>: ubuntu-latest
</span></span><span style="display:flex;"><span>    <span style="color:#ff79c6">permissions</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#ff79c6">packages</span>: write
</span></span><span style="display:flex;"><span>      <span style="color:#ff79c6">contents</span>: read
</span></span><span style="display:flex;"><span>    <span style="color:#ff79c6">steps</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#ff79c6">name</span>: Checkout the repository
</span></span><span style="display:flex;"><span>        <span style="color:#ff79c6">uses</span>: actions/checkout@v3
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>      - <span style="color:#ff79c6">name</span>: Docker Setup Buildx
</span></span><span style="display:flex;"><span>        <span style="color:#ff79c6">uses</span>: docker/setup-buildx-action@v2.2.1
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>      - <span style="color:#ff79c6">name</span>: Docker Login
</span></span><span style="display:flex;"><span>        <span style="color:#ff79c6">uses</span>: docker/login-action@v2.1.0
</span></span><span style="display:flex;"><span>        <span style="color:#ff79c6">with</span>:
</span></span><span style="display:flex;"><span>          <span style="color:#ff79c6">registry</span>: ghcr.io
</span></span><span style="display:flex;"><span>          <span style="color:#ff79c6">username</span>: ${{ github.actor }}
</span></span><span style="display:flex;"><span>          <span style="color:#ff79c6">password</span>: ${{ secrets.GITHUB_TOKEN }}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>      - <span style="color:#ff79c6">name</span>: Build and push Docker images
</span></span><span style="display:flex;"><span>        <span style="color:#ff79c6">uses</span>: docker/build-push-action@v3.2.0
</span></span><span style="display:flex;"><span>        <span style="color:#ff79c6">env</span>:
</span></span><span style="display:flex;"><span>          <span style="color:#ff79c6">REGISTRY</span>: ghcr.io
</span></span><span style="display:flex;"><span>          <span style="color:#ff79c6">IMAGE_NAME</span>: ${{ github.repository }}
</span></span><span style="display:flex;"><span>        <span style="color:#ff79c6">with</span>:
</span></span><span style="display:flex;"><span>          <span style="color:#ff79c6">context</span>: .
</span></span><span style="display:flex;"><span>          <span style="color:#ff79c6">file</span>: ./Dockerfile
</span></span><span style="display:flex;"><span>          <span style="color:#ff79c6">target</span>: final
</span></span><span style="display:flex;"><span>          <span style="color:#ff79c6">push</span>: <span style="color:#ff79c6">true</span>
</span></span><span style="display:flex;"><span>          <span style="color:#ff79c6">tags</span>: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
</span></span></code></pre></div><h2 id="lets-go-through-the-important-parts">Let’s go through the important parts:</h2>
<p><strong>Permissions</strong>: Actions have access to the repo while running. We should always make sure by setting the permissions, that actions have the minimum access they require. See here: permissions for the <code>github_token</code></p>
<p><strong>Step 1–2: Checkout the code and Setup docker</strong></p>
<p><strong>Step 3: Login to GitHub Container Registry</strong>: This is where the interesting part starts. <code>github.actor</code> is the user that triggers the workflow. For password use <code>secrets.GITHUB_TOKEN</code> which is a temporary token which is automatically generated for this workflow. See here: publishing images to github-packages.</p>
<p><strong>Step 4: Build and push Docker images</strong>: If the registry that you want to push to belongs to an organization then you will need to add permissions to create packages. If it lives under your own handle you don’t need to configure anything more since you are the owner already and the <code>secrets.GITHUB_TOKEN</code> has all the permissions granted.</p>
<p>The action will consume the Dockerfile and build the image up to the target build step that you can define. In docker the repository where the image will be hosted is also part of the tag. Setting the image name to the repository name will create an image with the following tag: <code>ghcr.io/OWNER/IMAGE_NAME:latest</code></p>
<p>Read more here: pushing container images</p>
<h2 id="happy-shipping-o">Happy shipping \o/</h2>
]]></description><media:thumbnail url="https://blog.dazzlog.de/dockergithub.png"/></item><item><title>Goodbye Jekyll, hello Hugo</title><link>https://blog.dazzlog.de/posts/2022-12-27_goodbye-jekyl-hello-hugo/</link><pubDate>Tue, 27 Dec 2022 17:44:27 +0100</pubDate><guid>https://blog.dazzlog.de/posts/2022-12-27_goodbye-jekyl-hello-hugo/</guid><description><![CDATA[<p>I started this blog in March 2013 when I was working for ImagineEasy when I had a few ideas to write down on how I&rsquo;d work with Doctrine Repositories. I still like the idea, but I&rsquo;d probably do it a bit different today. The blog and also how I&rsquo;d work with doctrine.</p>
<p>At the time Jekyll was the way to handle a static file blog. Since then, again, a few things have changed. GitHub is now owned by Microsoft and there are GitHub Actions.</p>
<p>Jekyll still exists, but all in all I think it was a modern choice at a different time. So what&rsquo;s next then? I must admit I did not look far, it was more a Zeitgeist thing that just ran my way.</p>
<p>Someone mentioned HUGO as a blog that you can easily publish to from Obsidian, I&rsquo;m not planning on using that particular feature, but I looked <a href="https://gohugo.io/about/">HUGO</a> up, and it seems that it is exactly what I was to lazy to look for. A static site generator that uses markdown and can be build by GitHub Actions.</p>
<p>There is already a huge list of possible themes and many look promising from the thumbnail, but feature wise there is a huge difference. What to look out for:</p>
<ul>
<li>How far is the template deviating from the default, in case you ever want to change the template.</li>
<li>Which features do you want/need and are they already included, is it complicated to add them  later?</li>
<li>Are there existing installations that are actively used, so they can be used as a reference</li>
<li>Is there a reference/documentation on how to install it on the host</li>
<li>How do you publish new content, are there examples/documentation?</li>
<li>What is the version of the technologies in the deploy-chain, old?</li>
</ul>
<p>For every point there is also the question of how complicated each step is.</p>
<p>As a reference, this is what I ended up doing:</p>
<h2 id="local-setup">Local setup</h2>
<h3 id="install-hugo">install hugo</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>sudo apt-get install hugo
</span></span></code></pre></div><h3 id="create-a-new-site">create a new site</h3>
<p>see the <a href="https://gohugo.io/getting-started/quick-start/">official Quick Start</a> for more infos.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>hugo new site dazz.github.io
</span></span><span style="display:flex;"><span><span style="color:#8be9fd;font-style:italic">cd</span> dazz.github.io
</span></span><span style="display:flex;"><span>git init
</span></span></code></pre></div><h3 id="add-a-theme">add a theme</h3>
<p>Look at all the <a href="https://themes.gohugo.io/tags/blog/">blog themes</a> hugo already has listed.</p>
<p>I chose <code>hugo-ficurinia</code> as it has the following enabled: tags, categories, fonts I like, simply deploys and looks as promised.</p>
<p>Add the theme as submodule:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>git submodule add https://gitlab.com/gabmus/hugo-ficurinia themes/hugo-ficurinia
</span></span></code></pre></div><p>And run a local server to test everything</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>hugo server -t hugo-ficurinia
</span></span></code></pre></div><h3 id="add-a-blog-post">add a blog post</h3>
<p>There is probably nothing much to see, so let&rsquo;s add a new post as draft.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>hugo new posts/hello-world/index.md
</span></span></code></pre></div><p>Make sure to read about how to <a href="https://gohugo.io/content-management/organization/">organize the content</a> in directories.</p>
<h3 id="run-the-server">run the server</h3>
<p>And run the server again and also include the draft post</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>hugo server -t hugo-ficurinia --buildDrafts
</span></span></code></pre></div><p>When you run just <code>hugo -t hugo-ficurinia</code>  the site will be build and dumped to <code>public/</code>. That is what we will later do to deploy the site.</p>
<p>Time to commit all the changed files and add the remote to push everything</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>git remote add origin git@github.com:dazz/dazz.github.io.git
</span></span><span style="display:flex;"><span>git push origin main
</span></span></code></pre></div><p>There will nothing happen yet as we still need to add the github workflow</p>
<h2 id="deploy-to-github-pages-via-github-actions">Deploy to GitHub pages via GitHub actions</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>mkdir -p .github/workflows
</span></span><span style="display:flex;"><span>touch .github/workflows/pages-deploy.yml
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#6272a4"># file: .github/workflows/pages-deploy.yml</span>
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">name</span>: <span style="color:#f1fa8c">&#34;Build and Deploy gh-pages&#34;</span>  
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">on</span>:  
</span></span><span style="display:flex;"><span>  <span style="color:#ff79c6">push</span>:  
</span></span><span style="display:flex;"><span>    <span style="color:#ff79c6">branches</span>:  
</span></span><span style="display:flex;"><span>      - main  
</span></span><span style="display:flex;"><span>    <span style="color:#ff79c6">paths-ignore</span>:  
</span></span><span style="display:flex;"><span>      - .gitignore  
</span></span><span style="display:flex;"><span>      - README.md  
</span></span><span style="display:flex;"><span>      - LICENSE  
</span></span><span style="display:flex;"><span>  
</span></span><span style="display:flex;"><span>  <span style="color:#6272a4"># Allows you to run this workflow manually from the Actions tab  </span>
</span></span><span style="display:flex;"><span>  <span style="color:#ff79c6">workflow_dispatch</span>:  
</span></span><span style="display:flex;"><span>  
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">permissions</span>:  
</span></span><span style="display:flex;"><span>  <span style="color:#ff79c6">contents</span>: write <span style="color:#6272a4"># needed to push to the gh-pages branch</span>
</span></span><span style="display:flex;"><span>  <span style="color:#ff79c6">pages</span>: write  
</span></span><span style="display:flex;"><span>  <span style="color:#ff79c6">id-token</span>: write  
</span></span><span style="display:flex;"><span>  
</span></span><span style="display:flex;"><span><span style="color:#6272a4"># Allow one concurrent deployment  </span>
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">concurrency</span>:  
</span></span><span style="display:flex;"><span>  <span style="color:#ff79c6">group</span>: <span style="color:#f1fa8c">&#34;pages&#34;</span>  
</span></span><span style="display:flex;"><span>  <span style="color:#ff79c6">cancel-in-progress</span>: <span style="color:#ff79c6">true</span>  
</span></span><span style="display:flex;"><span>  
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">jobs</span>:  
</span></span><span style="display:flex;"><span>  <span style="color:#ff79c6">build</span>:  
</span></span><span style="display:flex;"><span>    <span style="color:#ff79c6">runs-on</span>: ubuntu-latest  
</span></span><span style="display:flex;"><span>  
</span></span><span style="display:flex;"><span>    <span style="color:#ff79c6">steps</span>:  
</span></span><span style="display:flex;"><span>  
</span></span><span style="display:flex;"><span>      <span style="color:#6272a4"># Step 1 - Checks-out your repository under $GITHUB_WORKSPACE  </span>
</span></span><span style="display:flex;"><span>      - <span style="color:#ff79c6">name</span>: Checkout  
</span></span><span style="display:flex;"><span>        <span style="color:#ff79c6">uses</span>: actions/checkout@v3  
</span></span><span style="display:flex;"><span>        <span style="color:#ff79c6">with</span>:  
</span></span><span style="display:flex;"><span>          <span style="color:#ff79c6">fetch-depth</span>: <span style="color:#bd93f9">0</span>  
</span></span><span style="display:flex;"><span>          <span style="color:#ff79c6">submodules</span>: <span style="color:#ff79c6">true</span>  
</span></span><span style="display:flex;"><span>  
</span></span><span style="display:flex;"><span>      <span style="color:#6272a4"># Step 2 - Sets up the latest version of Hugo  </span>
</span></span><span style="display:flex;"><span>      - <span style="color:#ff79c6">name</span>: Hugo setup  
</span></span><span style="display:flex;"><span>        <span style="color:#ff79c6">uses</span>: peaceiris/actions-hugo@v2.6.0  
</span></span><span style="display:flex;"><span>        <span style="color:#ff79c6">with</span>:  
</span></span><span style="display:flex;"><span>          <span style="color:#ff79c6">extended</span>: <span style="color:#ff79c6">true</span>  
</span></span><span style="display:flex;"><span>          <span style="color:#ff79c6">hugo-version</span>: <span style="color:#f1fa8c">&#39;latest&#39;</span>  
</span></span><span style="display:flex;"><span>  
</span></span><span style="display:flex;"><span>      <span style="color:#6272a4"># Step 3 - Adds a cache  </span>
</span></span><span style="display:flex;"><span>      - <span style="color:#ff79c6">uses</span>: actions/cache@v2  
</span></span><span style="display:flex;"><span>        <span style="color:#ff79c6">with</span>:  
</span></span><span style="display:flex;"><span>          <span style="color:#ff79c6">path</span>: /tmp/hugo_cache  
</span></span><span style="display:flex;"><span>          <span style="color:#ff79c6">key</span>: ${{ runner.os }}-hugomod-${{ hashFiles(&#39;**/go.sum&#39;) }}  
</span></span><span style="display:flex;"><span>          <span style="color:#ff79c6">restore-keys</span>: |  
</span></span><span style="display:flex;"><span>            ${{ runner.os }}-hugomod-  
</span></span><span style="display:flex;"><span>  
</span></span><span style="display:flex;"><span>      <span style="color:#6272a4"># Step 4 - Clean and don&#39;t fail  </span>
</span></span><span style="display:flex;"><span>      - <span style="color:#ff79c6">name</span>: Clean public directory  
</span></span><span style="display:flex;"><span>        <span style="color:#ff79c6">run</span>: rm -rf public/*  
</span></span><span style="display:flex;"><span>  
</span></span><span style="display:flex;"><span>      <span style="color:#6272a4"># Step 5 - Builds the site using the latest version of Hugo  </span>
</span></span><span style="display:flex;"><span>      <span style="color:#6272a4"># Also specifies the theme we want to use      </span>
</span></span><span style="display:flex;"><span>      - <span style="color:#ff79c6">name</span>: Build  
</span></span><span style="display:flex;"><span>        <span style="color:#ff79c6">run</span>: hugo --minify --theme=hugo-ficurinia  
</span></span><span style="display:flex;"><span>  
</span></span><span style="display:flex;"><span>      <span style="color:#6272a4"># Step 6 - Push our generated site to our gh-pages branch  </span>
</span></span><span style="display:flex;"><span>      - <span style="color:#ff79c6">name</span>: GitHub Pages action  
</span></span><span style="display:flex;"><span>        <span style="color:#ff79c6">uses</span>: peaceiris/actions-gh-pages@v3.9.0  
</span></span><span style="display:flex;"><span>        <span style="color:#ff79c6">with</span>:  
</span></span><span style="display:flex;"><span>          <span style="color:#ff79c6">github_token</span>: ${{ secrets.GITHUB_TOKEN }}  
</span></span><span style="display:flex;"><span>          <span style="color:#ff79c6">publish_dir</span>: ./public  
</span></span><span style="display:flex;"><span>          <span style="color:#ff79c6">cname</span>: dazz.github.io
</span></span></code></pre></div><p>Read more about the options you get when using <a href="https://github.com/marketplace/actions/hugo-setup">peaceiris/actions-hugo</a> and <a href="https://github.com/marketplace/actions/github-pages-action">peaceiris/actions-gh-pages</a>.</p>
<h2 id="customization">Customization</h2>
<p>Now the customization party can start. All the options are listed in the <code>config.toml</code>.</p>
<h2 id="happy-blogging-ohttpsdazzgithubio"><a href="https://dazz.github.io">Happy blogging \o/</a></h2>
]]></description><media:thumbnail url="https://blog.dazzlog.de/hugo.png"/></item><item><title>Hello, world!</title><link>https://blog.dazzlog.de/posts/2022-12-26_hello-world/</link><pubDate>Mon, 26 Dec 2022 21:29:35 +0100</pubDate><guid>https://blog.dazzlog.de/posts/2022-12-26_hello-world/</guid><description><![CDATA[<h2 id="introduction">Introduction</h2>
<p>This is <strong>bold</strong> text, and this is <em>emphasized</em> text.</p>
<p>Visit the <a href="https://gohugo.io">Hugo</a> website!</p>
]]></description></item><item><title>about</title><link>https://blog.dazzlog.de/about/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://blog.dazzlog.de/about/</guid><description><![CDATA[<p>I love programming and most parts of it is trying to figure out how things can be used to make the life easier for everyone.</p>
<p>Symfony is making my life easier since 2012, and I&rsquo;m now the organizer of the Symfony Usergroup Berlin.</p>
<p>I&rsquo;m member of c-base the crashed space station in berlin and there I experiment with all the other carbon based beings how to interact in a future compatible style.</p>
<h2 id="references">References</h2>
<ul>
<li>Logo: <a href="https://de.freepik.com/vektoren-kostenlos/niedlich-astronaut-arbeitende-mit-computer-karikatur-vektor-symbol-illustration-wissenschafts-technologie-ikonen-konzept-lokalisierter-erstklassiger-vektor-flacher-cartoon-stil_22750865.htm#query=space%20logo&amp;position=19&amp;from_view=search&amp;track=sph">Bild von catalyststuff auf Freepik</a></li>
</ul>
]]></description></item><item><title>impressum</title><link>https://blog.dazzlog.de/impressum/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://blog.dazzlog.de/impressum/</guid><description><![CDATA[<h2 id="angaben-gemäß--5-tmg">Angaben gemäß § 5 TMG</h2>
<p>Anne Seitz</p>
<p>Tempelhofer Ufer 1</p>
<p>10961 Berlin</p>
<h3 id="kontakt">Kontakt:</h3>
<p>E-Mail: <a href="mailto:dazzlog@gmail.com">dazzlog@gmail.com</a></p>
<h2 id="verantwortlich-für-den-inhalt-nach--55-abs-2-rstv">Verantwortlich für den Inhalt nach § 55 Abs. 2 RStV:</h2>
<p>Anne Seitz</p>
<p>Tempelhofer Ufer 1</p>
<p>10961 Berlin</p>
<h2 id="haftungsausschluss">Haftungsausschluss:</h2>
<h3 id="haftung-für-inhalte">Haftung für Inhalte</h3>
<p>Die Inhalte unserer Seiten wurden mit größter Sorgfalt erstellt. Für die Richtigkeit, Vollständigkeit und Aktualität der Inhalte können wir jedoch keine Gewähr übernehmen. Als Diensteanbieter sind wir gemäß § 7 Abs.1 TMG für eigene Inhalte auf diesen Seiten nach den allgemeinen Gesetzen verantwortlich. Nach §§ 8 bis 10 TMG sind wir als Diensteanbieter jedoch nicht verpflichtet, übermittelte oder gespeicherte fremde Informationen zu überwachen oder nach Umständen zu forschen, die auf eine rechtswidrige Tätigkeit hinweisen. Verpflichtungen zur Entfernung oder Sperrung der Nutzung von Informationen nach den allgemeinen Gesetzen bleiben hiervon unberührt. Eine diesbezügliche Haftung ist jedoch erst ab dem Zeitpunkt der Kenntnis einer konkreten Rechtsverletzung möglich. Bei Bekanntwerden von entsprechenden Rechtsverletzungen werden wir diese Inhalte umgehend entfernen.</p>
<h3 id="haftung-für-links">Haftung für Links</h3>
<p>Unser Angebot enthält Links zu externen Webseiten Dritter, auf deren Inhalte wir keinen Einfluss haben. Deshalb können wir für diese fremden Inhalte auch keine Gewähr übernehmen. Für die Inhalte der verlinkten Seiten ist stets der jeweilige Anbieter oder Betreiber der Seiten verantwortlich. Die verlinkten Seiten wurden zum Zeitpunkt der Verlinkung auf mögliche Rechtsverstöße überprüft. Rechtswidrige Inhalte waren zum Zeitpunkt der Verlinkung nicht erkennbar. Eine permanente inhaltliche Kontrolle der verlinkten Seiten ist jedoch ohne konkrete Anhaltspunkte einer Rechtsverletzung nicht zumutbar. Bei Bekanntwerden von Rechtsverletzungen werden wir derartige Links umgehend entfernen.</p>
<h3 id="urheberrecht">Urheberrecht</h3>
<p>Die durch die Seitenbetreiber erstellten Inhalte und Werke auf diesen Seiten unterliegen dem deutschen Urheberrecht. Die Vervielfältigung, Bearbeitung, Verbreitung und jede Art der Verwertung außerhalb der Grenzen des Urheberrechtes bedürfen der schriftlichen Zustimmung des jeweiligen Autors bzw. Erstellers. Downloads und Kopien dieser Seite sind nur für den privaten, nicht kommerziellen Gebrauch gestattet. Soweit die Inhalte auf dieser Seite nicht vom Betreiber erstellt wurden, werden die Urheberrechte Dritter beachtet. Insbesondere werden Inhalte Dritter als solche gekennzeichnet. Sollten Sie trotzdem auf eine Urheberrechtsverletzung aufmerksam werden, bitten wir um einen entsprechenden Hinweis. Bei Bekanntwerden von Rechtsverletzungen werden wir derartige Inhalte umgehend entfernen.</p>
<h3 id="datenschutz">Datenschutz</h3>
<p>Die Nutzung unserer Webseite ist in der Regel ohne Angabe personenbezogener Daten möglich. Soweit auf unseren Seiten personenbezogene Daten (beispielsweise Name, Anschrift oder eMail-Adressen) erhoben werden, erfolgt dies, soweit möglich, stets auf freiwilliger Basis. Diese Daten werden ohne Ihre ausdrückliche Zustimmung nicht an Dritte weitergegeben.
Wir weisen darauf hin, dass die Datenübertragung im Internet (z.B. bei der Kommunikation per E-Mail) Sicherheitslücken aufweisen kann. Ein lückenloser Schutz der Daten vor dem Zugriff durch Dritte ist nicht möglich.
Der Nutzung von im Rahmen der Impressumspflicht veröffentlichten Kontaktdaten durch Dritte zur Übersendung von nicht ausdrücklich angeforderter Werbung und Informationsmaterialien wird hiermit ausdrücklich widersprochen. Die Betreiber der Seiten behalten sich ausdrücklich rechtliche Schritte im Falle der unverlangten Zusendung von Werbeinformationen, etwa durch Spam-Mails, vor.</p>
<h3 id="google-analytics">Google Analytics</h3>
<p>Diese Website benutzt Google Analytics, einen Webanalysedienst der Google Inc. (&lsquo;&lsquo;Google&rsquo;&rsquo;). Google Analytics verwendet sog. &lsquo;&lsquo;Cookies&rsquo;&rsquo;, Textdateien, die auf Ihrem Computer gespeichert werden und die eine Analyse der Benutzung der Website durch Sie ermöglicht. Die durch den Cookie erzeugten Informationen über Ihre Benutzung dieser Website (einschließlich Ihrer IP-Adresse) wird an einen Server von Google in den USA übertragen und dort gespeichert. Google wird diese Informationen benutzen, um Ihre Nutzung der Website auszuwerten, um Reports über die Websiteaktivitäten für die Websitebetreiber zusammenzustellen und um weitere mit der Websitenutzung und der Internetnutzung verbundene Dienstleistungen zu erbringen. Auch wird Google diese Informationen gegebenenfalls an Dritte übertragen, sofern dies gesetzlich vorgeschrieben oder soweit Dritte diese Daten im Auftrag von Google verarbeiten. Google wird in keinem Fall Ihre IP-Adresse mit anderen Daten der Google in Verbindung bringen. Sie können die Installation der Cookies durch eine entsprechende Einstellung Ihrer Browser Software verhindern; wir weisen Sie jedoch darauf hin, dass Sie in diesem Fall gegebenenfalls nicht sämtliche Funktionen dieser Website voll umfänglich nutzen können. Durch die Nutzung dieser Website erklären Sie sich mit der Bearbeitung der über Sie erhobenen Daten durch Google in der zuvor beschriebenen Art und Weise und zu dem zuvor benannten Zweck einverstanden.</p>
<h3 id="google-adsense">Google AdSense</h3>
<p>Diese Website benutzt Google Adsense, einen Webanzeigendienst der Google Inc., USA (&lsquo;&lsquo;Google&rsquo;&rsquo;). Google Adsense verwendet sog. &lsquo;&lsquo;Cookies&rsquo;&rsquo; (Textdateien), die auf Ihrem Computer gespeichert werden und die eine Analyse der Benutzung der Website durch Sie ermöglicht. Google Adsense verwendet auch sog. &lsquo;&lsquo;Web Beacons&rsquo;&rsquo; (kleine unsichtbare Grafiken) zur Sammlung von Informationen. Durch die Verwendung des Web Beacons können einfache Aktionen wie der Besucherverkehr auf der Webseite aufgezeichnet und gesammelt werden. Die durch den Cookie und/oder Web Beacon erzeugten Informationen über Ihre Benutzung dieser Website (einschließlich Ihrer IP-Adresse) werden an einen Server von Google in den USA übertragen und dort gespeichert. Google wird diese Informationen benutzen, um Ihre Nutzung der Website im Hinblick auf die Anzeigen auszuwerten, um Reports über die Websiteaktivitäten und Anzeigen für die Websitebetreiber zusammenzustellen und um weitere mit der Websitenutzung und der Internetnutzung verbundene Dienstleistungen zu erbringen. Auch wird Google diese Informationen gegebenenfalls an Dritte übertragen, sofern dies gesetzlich vorgeschrieben oder soweit Dritte diese Daten im Auftrag von Google verarbeiten. Google wird in keinem Fall Ihre IP-Adresse mit anderen Daten der Google in Verbindung bringen. Das Speichern von Cookies auf Ihrer Festplatte und die Anzeige von Web Beacons können Sie verhindern, indem Sie in Ihren Browser-Einstellungen &lsquo;&lsquo;keine Cookies akzeptieren&rsquo;&rsquo; wählen (Im MS Internet-Explorer unter &lsquo;&lsquo;Extras &gt; Internetoptionen &gt; Datenschutz &gt; Einstellung&rsquo;&rsquo;; im Firefox unter &lsquo;&lsquo;Extras &gt; Einstellungen &gt; Datenschutz &gt; Cookies&rsquo;&rsquo;); wir weisen Sie jedoch darauf hin, dass Sie in diesem Fall gegebenenfalls nicht sämtliche Funktionen dieser Website voll umfänglich nutzen können. Durch die Nutzung dieser Website erklären Sie sich mit der Bearbeitung der über Sie erhobenen Daten durch Google in der zuvor beschriebenen Art und Weise und zu dem zuvor benannten Zweck einverstanden.</p>
<p>Website Impressum erstellt durch impressum-generator.de von der Kanzlei Hasselbach</p>
]]></description></item><item><title>ui</title><link>https://blog.dazzlog.de/ui/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://blog.dazzlog.de/ui/</guid><description><![CDATA[<h2 id="admonition">Admonition</h2>
<div class="details admonition note open">
  <div class="details-summary admonition-title">
    <i class="icon ">&#Xf040;</i> This is a note<i class="details-icon fas fa-angle-right fa-fw"></i>
  </div>
  <div class="details-content">
    <div class="admonition-content">Use the note shortcode when you want to draw attention to information subtly. note is intended to be less of an interruption in content than is warning.</div>
  </div>
</div>
<div class="details admonition abstract open">
  <div class="details-summary admonition-title">
    <i class="icon ">&#Xf03a;</i> This is a abstract<i class="details-icon fas fa-angle-right fa-fw"></i>
  </div>
  <div class="details-content">
    <div class="admonition-content">Lorem Ipsum</div>
  </div>
</div>
<div class="details admonition info open">
  <div class="details-summary admonition-title">
    <i class="icon ">&#xf05a;</i> This is an info<i class="details-icon fas fa-angle-right fa-fw"></i>
  </div>
  <div class="details-content">
    <div class="admonition-content">Lorem Ipsum</div>
  </div>
</div>
<div class="details admonition tip open">
  <div class="details-summary admonition-title">
    <i class="icon ">&#xf400;</i> This is a tip<i class="details-icon fas fa-angle-right fa-fw"></i>
  </div>
  <div class="details-content">
    <div class="admonition-content">Use the tip shortcode when you want to give the reader advice. tip, like note, is intended to be less of an interruption in content than is warning.</div>
  </div>
</div>
<div class="details admonition success open">
  <div class="details-summary admonition-title">
    <i class="icon ">&#xf058;</i> This is a success<i class="details-icon fas fa-angle-right fa-fw"></i>
  </div>
  <div class="details-content">
    <div class="admonition-content">Lorem Ipsum</div>
  </div>
</div>
<div class="details admonition question open">
  <div class="details-summary admonition-title">
    <i class="icon ">&#xf128;</i> This is a question<i class="details-icon fas fa-angle-right fa-fw"></i>
  </div>
  <div class="details-content">
    <div class="admonition-content">Lorem Ipsum</div>
  </div>
</div>
<div class="details admonition warning open">
  <div class="details-summary admonition-title">
    <i class="icon ">&#xf071;</i> This is an warning<i class="details-icon fas fa-angle-right fa-fw"></i>
  </div>
  <div class="details-content">
    <div class="admonition-content">Use the warning shortcode when you want to draw the user’s attention to something important. A good usage example is for articulating breaking changes in Hugo versions, known bugs, or templating “gotchas.”</div>
  </div>
</div>
<div class="details admonition failure open">
  <div class="details-summary admonition-title">
    <i class="icon ">&#xf057;</i> This is a failure<i class="details-icon fas fa-angle-right fa-fw"></i>
  </div>
  <div class="details-content">
    <div class="admonition-content">Lorem Ipsum</div>
  </div>
</div>
<div class="details admonition danger open">
  <div class="details-summary admonition-title">
    <i class="icon ">&#xfb8a;</i> This is danger<i class="details-icon fas fa-angle-right fa-fw"></i>
  </div>
  <div class="details-content">
    <div class="admonition-content">Lorem Ipsum</div>
  </div>
</div>
<div class="details admonition bug open">
  <div class="details-summary admonition-title">
    <i class="icon ">&#xf188;</i> This is a bug<i class="details-icon fas fa-angle-right fa-fw"></i>
  </div>
  <div class="details-content">
    <div class="admonition-content">Lorem Ipsum</div>
  </div>
</div>
<div class="details admonition example open">
  <div class="details-summary admonition-title">
    <i class="icon ">&#Xf03a;</i> This is an example<i class="details-icon fas fa-angle-right fa-fw"></i>
  </div>
  <div class="details-content">
    <div class="admonition-content">Lorem Ipsum</div>
  </div>
</div>
<div class="details admonition quote open">
  <div class="details-summary admonition-title">
    <i class="icon ">&#xf10d;</i> This is a quote<i class="details-icon fas fa-angle-right fa-fw"></i>
  </div>
  <div class="details-content">
    <div class="admonition-content">Lorem Ipsum</div>
  </div>
</div>
<div class="details admonition symfony open">
  <div class="details-summary admonition-title">
    <i class="icon ">&#xe756;</i> This is a symfony<i class="details-icon fas fa-angle-right fa-fw"></i>
  </div>
  <div class="details-content">
    <div class="admonition-content">Lorem Ipsum</div>
  </div>
</div>
<div class="details admonition php open">
  <div class="details-summary admonition-title">
    <i class="icon ">&#xe73d;</i> This is a php<i class="details-icon fas fa-angle-right fa-fw"></i>
  </div>
  <div class="details-content">
    <div class="admonition-content">Lorem Ipsum</div>
  </div>
</div>
<div class="details admonition docker open">
  <div class="details-summary admonition-title">
    <i class="icon ">&#xf308;</i> This is a docker<i class="details-icon fas fa-angle-right fa-fw"></i>
  </div>
  <div class="details-content">
    <div class="admonition-content">Lorem Ipsum</div>
  </div>
</div>
]]></description></item></channel></rss>